<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Knowledge Gathering]]></title>
  <link href="http://akovtunov.github.io/atom.xml" rel="self"/>
  <link href="http://akovtunov.github.io/"/>
  <updated>2017-04-26T00:23:48+02:00</updated>
  <id>http://akovtunov.github.io/</id>
  <author>
    <name><![CDATA[Alexandr Kovtunov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Different Sides of Ruby Development: OpenGL]]></title>
    <link href="http://akovtunov.github.io/blog/2017/04/24/different-sides-of-ruby-development-opengl/"/>
    <updated>2017-04-24T12:03:59+02:00</updated>
    <id>http://akovtunov.github.io/blog/2017/04/24/different-sides-of-ruby-development-opengl</id>
    <content type="html"><![CDATA[<blockquote><p>This is a copy of my <a href="http://www.diatomenterprises.com/different-sides-of-ruby-development-opengl/">original post for Diatom Enterprises</a></p></blockquote>

<p>When I’m trying to take a break from web development, I like to build something new and uncommon in Ruby programming. Ruby is typically known for web services, APIs and other web-related development. But with some time, you can build many other types of software.
Different sides of Ruby development: OpenGL</p>

<p><img src="http://akovtunov.github.io/images/ruby_opengl/blan_eeeeee1.jpg"></p>

<p>After creating , I started researching Ruby applications that use 3D graphics. I found a nice library, <a href="https://github.com/larskanis/opengl">OpenGL for Ruby</a>, and created a few samples with it. At first, it can be difficult to understand everything, but let’s see what can we do!</p>

<!--more-->


<p>To start working with <code>OpenGL</code> for Ruby, we only need two gems:
<code>Gemfile.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://rubygems.org&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;gosu&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;opengl&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I chose <a href="https://github.com/tianon/gosu">gosu</a> because it provides good functionality to work with windows, players and partial rendering of window objects.</p>

<h2>LET’S CREATE SOMETHING SIMPLE!</h2>

<p>Sometimes it’s hard to imagine how everything should look in 3D, so for the first step, I chose to draw an axis instead of a simple cube.
This is a good way to see how our coordinates lie on the three-dimensional grid. Also, we will set the color of the lines to define where the <code>x</code>, <code>y</code> and <code>z</code> coordinates are.
I suggest that you separate objects into different classes that will stay under the <code>objects/</code> directory. So <code>media/axis.rb</code> will contain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Axis</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:x_width</span><span class="p">,</span> <span class="ss">:y_width</span><span class="p">,</span> <span class="ss">:z_width</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@x_width</span> <span class="o">=</span> <span class="n">x_width</span>
</span><span class='line'>    <span class="vi">@y_width</span> <span class="o">=</span> <span class="n">y_width</span>
</span><span class='line'>    <span class="vi">@z_width</span> <span class="o">=</span> <span class="n">z_width</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">draw</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span> <span class="o">=</span> <span class="kp">new</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">draw</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draw</span>
</span><span class='line'>    <span class="n">glBegin</span><span class="p">(</span><span class="no">GL_LINES</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glColor3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glColor3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glColor3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>    <span class="n">glEnd</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>All the OpenGL magic happens in the draw action. <code>glBegin</code> and <code>glEnd</code> works like a ruby block where in argument you need to send the type of object that you want to draw in the argument. You can find all the types in the <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glBegin.xml">official documentation</a>.
Inside this block you set the lines and their color. This sets the color for all the lines that you will draw after method <code>glColor3d</code>. There are lots of different implementations of the <code>glColor</code> method that differ only by the type of argument.<code>glColor3d</code> takes arguments in <code>GLdouble</code>, <code>glColor3f</code>, <code>GLfloat</code>, etc. <code>glColor3d</code> takes three arguments – red, green and blue values. <code>glColor4*</code> can also take an alpha value.
To draw a line, you need to set two points, and OpenGL will draw a line between them. To do this, you need to call <code>glVertex</code>. You can pass two to four arguments of different types, depending on the method you are trying to call. In our case, we are sending the <code>x</code>, <code>y</code> and <code>z</code> coordinates of our future points. You can set as many lines in your <code>glBegin…glEnd</code> block as you wish. In my example, I’m drawing lines from the beginning of the axis (x = 0, y = 0, z = 0) to (x = <code>x_width</code>, y = <code>y_width</code>, z = <code>z_width</code>) in pixels.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;opengl&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;glu&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;gosu&#39;</span>
</span><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="s2">&quot;objects/*&quot;</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="n">require_relative</span> <span class="n">file</span> <span class="p">}</span>
</span><span class='line'><span class="kp">include</span> <span class="no">Gl</span><span class="p">,</span> <span class="no">Glu</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="no">Gosu</span><span class="o">::</span><span class="no">Window</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="k">super</span> <span class="mi">800</span><span class="p">,</span> <span class="mi">600</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">caption</span> <span class="o">=</span> <span class="s2">&quot;Diatom&#39;s OpenGL Tutorial&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draw</span>
</span><span class='line'>    <span class="n">gl</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">glClear</span><span class="p">(</span><span class="no">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="no">GL_DEPTH_BUFFER_BIT</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Axis</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">button_down</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">exit</span> <span class="k">if</span> <span class="nb">id</span> <span class="o">==</span> <span class="no">Gosu</span><span class="o">::</span><span class="no">KbEscape</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Window</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">show</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>glClear</code> clears buffers to preset values. After that we call <code>Axis.draw</code> to draw our axis.</p>

<p><img src="http://akovtunov.github.io/images/ruby_opengl/diatom_opengl-4.jpg"></p>

<p>As you can see, we can’t find an <code>y</code> axis because there is a frame border in its place. So if you want, you can set start of the line from <code>(x = 1)</code> instead of <code>(x = 0)</code>.</p>

<p><img src="http://akovtunov.github.io/images/ruby_opengl/diatom_opengl-5.jpg"></p>

<p>Here we see a problem: what if we want to draw a set different objects, but not from the top left corner? What if we want to move the center of the axes?</p>

<h2>MOVING THE CENTER OF THE AXES</h2>

<p>To move the center of the axes, we can use the <code>glTranslate</code> method. It multiplies the current matrix by a translation matrix and produces a translation by x, y, z. All the objects after the <code>glTranslate</code> method will be drawn depending on those coordinates. To work with both translated and normal coordinates, we need to use the <code>glPushMatrix</code> and <code>glPopMatrix</code> methods, which will save the previous matrix and restore it. <code>glTranslate</code> produces different methods – <code>glTranslated(x, y, z)</code>, <code>glTranslatef(x, y, z)</code> etc. – where <code>x</code>, <code>y</code> and <code>z</code> are the coordinates of a translation vector.
Let’s update our code using this method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">draw</span>
</span><span class='line'> <span class="n">gl</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">glClear</span><span class="p">(</span><span class="no">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="no">GL_DEPTH_BUFFER_BIT</span><span class="p">)</span>
</span><span class='line'>   <span class="n">glPushMatrix</span>
</span><span class='line'>     <span class="n">glTranslated</span><span class="p">(</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>     <span class="no">Axis</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>   <span class="n">glPopMatrix</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://akovtunov.github.io/images/ruby_opengl/diatom_opengl-6.jpg"></p>

<p>As we can now see, our axis moved to the center of our screen. To see the difference and how <code>glPushMatrix</code> and <code>glPopMatrix</code> work, let’s add the previous axis too.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">draw</span>
</span><span class='line'>  <span class="n">gl</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">glClear</span><span class="p">(</span><span class="no">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="no">GL_DEPTH_BUFFER_BIT</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glPushMatrix</span>
</span><span class='line'>      <span class="n">glTranslated</span><span class="p">(</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Axis</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>    <span class="n">glPopMatrix</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glEnable</span><span class="p">(</span><span class="no">GL_LINE_STIPPLE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">glLineStipple</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mh">0x00FF</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Axis</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>    <span class="n">glDisable</span><span class="p">(</span><span class="no">GL_LINE_STIPPLE</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://akovtunov.github.io/images/ruby_opengl/diatom_opengl-3.jpg"></p>

<p>As you can see, the previous axis was drawn on the (0, 0, 0) coordinates with the stippled lines without any change to <code>axis.rb</code> or its coordinates.
It seems like we forgot about the z coordinate that we can’t see on our flat screen. To take a look at it, we need to use a viewpoint.</p>

<h2>GETTING INTO THE REAL 3D WORLD</h2>

<p>At first, I suggest that you build another object on our scene – a cube. It will help us to see the difference between the angles of our viewpoint.
To draw it, we can use <code>GL_QUADS</code>. Each of the four points defines a Quad, so to make a cube we need six Quads = 24 points.
<code>objects/cube.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Cube</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:x_width</span><span class="p">,</span> <span class="ss">:y_width</span><span class="p">,</span> <span class="ss">:z_width</span><span class="p">,</span> <span class="ss">:mode</span><span class="p">,</span> <span class="ss">:mode_face</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">,</span> <span class="n">mode_face</span><span class="p">,</span> <span class="n">mode</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@x_width</span> <span class="o">=</span> <span class="n">x_width</span>
</span><span class='line'>    <span class="vi">@y_width</span> <span class="o">=</span> <span class="n">y_width</span>
</span><span class='line'>    <span class="vi">@z_width</span> <span class="o">=</span> <span class="n">z_width</span>
</span><span class='line'>    <span class="vi">@mode</span> <span class="o">=</span> <span class="n">mode</span>
</span><span class='line'>    <span class="vi">@mode_face</span> <span class="o">=</span> <span class="n">mode_face</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">draw</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">,</span> <span class="n">mode_face</span> <span class="o">=</span> <span class="no">GL_FRONT_AND_BACK</span><span class="p">,</span> <span class="n">mode</span> <span class="o">=</span> <span class="no">GL_FILL</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span> <span class="o">=</span> <span class="kp">new</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">,</span> <span class="n">mode_face</span><span class="p">,</span> <span class="n">mode</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">draw</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draw</span>
</span><span class='line'>    <span class="n">glPolygonMode</span><span class="p">(</span><span class="n">mode_face</span><span class="p">,</span> <span class="n">mode</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glBegin</span><span class="p">(</span><span class="no">GL_QUADS</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#yx</span>
</span><span class='line'>      <span class="n">glColor3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#yz</span>
</span><span class='line'>      <span class="n">glColor3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#zx</span>
</span><span class='line'>      <span class="n">glColor3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#z -&gt; yx</span>
</span><span class='line'>      <span class="n">glColor3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#x -&gt; yz</span>
</span><span class='line'>      <span class="n">glColor3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#y -&gt; zx</span>
</span><span class='line'>      <span class="n">glColor3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>    <span class="n">glEnd</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I’ve added two new variables – arguments for <code>glPolygonMode</code> that set a <code>rasterization</code> mode. The arguments are face (front, back) and mode (<code>GL_POINT</code>, <code>GL_LINE</code>, <code>GL_FILL</code>).
Let’s also update our axes and move code that defines their line types inside.</p>

<p><code>objects/axis.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Axis</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:x_width</span><span class="p">,</span> <span class="ss">:y_width</span><span class="p">,</span> <span class="ss">:z_width</span><span class="p">,</span> <span class="ss">:stipple</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">,</span> <span class="n">stipple</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@x_width</span> <span class="o">=</span> <span class="n">x_width</span>
</span><span class='line'>    <span class="vi">@y_width</span> <span class="o">=</span> <span class="n">y_width</span>
</span><span class='line'>    <span class="vi">@z_width</span> <span class="o">=</span> <span class="n">z_width</span>
</span><span class='line'>    <span class="vi">@stipple</span> <span class="o">=</span> <span class="n">stipple</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">draw</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">,</span> <span class="n">stipple</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span> <span class="o">=</span> <span class="kp">new</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">,</span> <span class="n">stipple</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">draw</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draw</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">stipple</span>
</span><span class='line'>      <span class="n">glEnable</span><span class="p">(</span><span class="no">GL_LINE_STIPPLE</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glLineStipple</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mh">0x00FF</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">glBegin</span><span class="p">(</span><span class="no">GL_LINES</span><span class="p">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="n">glEnd</span>
</span><span class='line'>    <span class="n">glDisable</span><span class="p">(</span><span class="no">GL_LINE_STIPPLE</span><span class="p">)</span> <span class="k">if</span> <span class="n">stipple</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s update our code to use our new cubes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">draw</span>
</span><span class='line'>  <span class="n">gl</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">glClear</span><span class="p">(</span><span class="no">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="no">GL_DEPTH_BUFFER_BIT</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glPushMatrix</span>
</span><span class='line'>      <span class="n">glTranslated</span><span class="p">(</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Axis</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Cube</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="no">GL_FRONT_AND_BACK</span><span class="p">,</span> <span class="no">GL_LINE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">glPopMatrix</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Cube</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="no">GL_FRONT_AND_BACK</span><span class="p">,</span> <span class="no">GL_LINE</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Axis</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://akovtunov.github.io/images/ruby_opengl/diatom_opengl-9.jpg"></p>

<p>Looks clear, doesn’t it?
To add perspective, we need to use the <code>gluPerspective</code> method, which is used to set up a perspective projection. It’s done once to set up how the scene will be rendered. If <code>gluPerspective</code> is used, the perspective correction will happen while rendering. The arguments are angle of view, aspect ratio, z-near and z-far.</p>

<p><img src="http://akovtunov.github.io/images/ruby_opengl/Untitled-drawing-1.jpg"></p>

<p>So, let’s add perspective to our application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">draw</span>
</span><span class='line'>  <span class="n">gl</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">glClear</span><span class="p">(</span><span class="no">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="no">GL_DEPTH_BUFFER_BIT</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glMatrixMode</span><span class="p">(</span><span class="no">GL_PROJECTION</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glLoadIdentity</span><span class="p">()</span>
</span><span class='line'>      <span class="n">gluPerspective</span><span class="p">(</span><span class="mi">130</span><span class="p">,</span> <span class="n">width</span><span class="o">.</span><span class="n">to_f</span><span class="o">/</span><span class="n">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glMatrixMode</span><span class="p">(</span><span class="no">GL_MODELVIEW</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glLoadIdentity</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glPushMatrix</span>
</span><span class='line'>      <span class="n">glTranslated</span><span class="p">(</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Axis</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Cube</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="no">GL_FRONT_AND_BACK</span><span class="p">,</span> <span class="no">GL_LINE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">glPopMatrix</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Cube</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="no">GL_FRONT_AND_BACK</span><span class="p">,</span> <span class="no">GL_LINE</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Axis</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://akovtunov.github.io/images/ruby_opengl/diatom_opengl-10.jpg"></p>

<p>We can see that our field of view has been updated, and we can see only part of our (0, 0, 0) cube and axis. To see what <code>gluPerspective</code> really changes, let’s add a viewpoint.</p>

<p>To turn the player, OpenGL developers usually build a matrix of the view, load it and use later to turn the entire scene around the player. To simplify our code, we will create a ‘camera’ object that will help us look at the whole scene. To do this, we will use <code>gluLookAt</code>.</p>

<p><img src="http://akovtunov.github.io/images/ruby_opengl/Untitled-123.jpg"></p>

<p>If we don’t set <code>gluLookAt</code>, OpenGL will automatically set it to (x = 0, y = 0, z = 0). Looking at our screen, that will be equal to <code>gluLookAt(0, 0, 1, 0, 0, 0, 0, 1, 0)</code>. So, let’s set our <code>gluLookAt</code> properly, so we can see our scene.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">glMatrixMode</span><span class="p">(</span><span class="no">GL_MODELVIEW</span><span class="p">)</span>
</span><span class='line'><span class="n">glLoadIdentity</span><span class="p">()</span>
</span><span class='line'><span class="n">gluLookAt</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span> <span class="mi">400</span><span class="p">,</span> <span class="mi">400</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>gluLookAt</code> sets our camera to point (x = 400, y = 400, z = 400) and looks at point (x = 0, y = 0, z = 0), three other coordinates of <code>up</code> vector that we will not touch for now.</p>

<p><img src="http://akovtunov.github.io/images/ruby_opengl/diatom_opengl-12.jpg"></p>

<p>Let’s play with gluPerspective a bit now.
<code>gluPerspective(130, width.to_f/height, 0.001, 225)</code></p>

<p><img src="http://akovtunov.github.io/images/ruby_opengl/diatom_opengl-21_2.jpg">
<img src="http://akovtunov.github.io/images/ruby_opengl/diatom_opengl-23_2.jpg">
<img src="http://akovtunov.github.io/images/ruby_opengl/diatom_opengl-24_2.jpg"></p>

<p>What if we want to move the camera and see the other sides of our scene? Here <code>gosu</code> helps with its built-in I\O mechanisms.</p>

<h2>MOVING THE CAMERA</h2>

<p>As you noticed, we can change all of the arguments of the <code>gluLookAt</code> method. To move our camera, we need to bind those changes to the keyboard.
I will not explain the difficult math behind the matrixes and real turning of cameras as it was made in games\applications through formulas of radiuses and angles. I want to move our camera only through axes. I know that it’s not the best solution, but it’s the easiest for understanding.
Let’s move our <code>gluLookAt</code> method inside the new camera object that will be in <code>objects/camera.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Camera</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:camera_position</span><span class="p">,</span> <span class="ss">:look_at_object_position</span><span class="p">,</span> <span class="ss">:window</span><span class="p">,</span> <span class="ss">:speed</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">window</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@window</span> <span class="o">=</span> <span class="n">window</span>
</span><span class='line'>    <span class="vi">@camera_position</span> <span class="o">=</span> <span class="no">Vector3</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span> <span class="mi">400</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@look_at_object_position</span> <span class="o">=</span> <span class="no">Vector3</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@speed</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">capture</span>
</span><span class='line'>    <span class="n">font</span> <span class="o">=</span> <span class="no">Gosu</span><span class="o">::</span><span class="no">Font</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">default_font_name</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>    <span class="n">button_down</span>
</span><span class='line'>    <span class="n">font</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="s2">&quot;Camera position: </span><span class="si">#{</span><span class="n">camera_position</span><span class="o">.</span><span class="n">x</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="n">camera_position</span><span class="o">.</span><span class="n">y</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="n">camera_position</span><span class="o">.</span><span class="n">z</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>    <span class="n">font</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="s2">&quot;Look at position: </span><span class="si">#{</span><span class="n">look_at_object_position</span><span class="o">.</span><span class="n">x</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="n">look_at_object_position</span><span class="o">.</span><span class="n">y</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="n">look_at_object_position</span><span class="o">.</span><span class="n">z</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>    <span class="n">font</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="s2">&quot;Your speed: </span><span class="si">#{</span><span class="n">speed</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0xffffffff</span><span class="p">)</span>
</span><span class='line'>    <span class="n">gluLookAt</span><span class="p">(</span><span class="n">camera_position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">camera_position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">camera_position</span><span class="o">.</span><span class="n">z</span><span class="p">,</span> <span class="n">look_at_object_position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">look_at_object_position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">look_at_object_position</span><span class="o">.</span><span class="n">z</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">button_down</span>
</span><span class='line'>    <span class="vi">@camera_position</span><span class="o">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">speed</span> <span class="k">if</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KbRight</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">!</span><span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KB_LEFT_SHIFT</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@camera_position</span><span class="o">.</span><span class="n">x</span> <span class="o">-=</span> <span class="n">speed</span> <span class="k">if</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KbLeft</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">!</span><span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KB_LEFT_SHIFT</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@camera_position</span><span class="o">.</span><span class="n">y</span> <span class="o">+=</span> <span class="n">speed</span> <span class="k">if</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KbUp</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">!</span><span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KB_LEFT_SHIFT</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@camera_position</span><span class="o">.</span><span class="n">y</span> <span class="o">-=</span> <span class="n">speed</span> <span class="k">if</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KbDown</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">!</span><span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KB_LEFT_SHIFT</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@camera_position</span><span class="o">.</span><span class="n">z</span> <span class="o">+=</span> <span class="n">speed</span> <span class="k">if</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KB_NUMPAD_8</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">!</span><span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KB_LEFT_SHIFT</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@camera_position</span><span class="o">.</span><span class="n">z</span> <span class="o">-=</span> <span class="n">speed</span> <span class="k">if</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KB_NUMPAD_2</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">!</span><span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KB_LEFT_SHIFT</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@look_at_object_position</span><span class="o">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">speed</span> <span class="k">if</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KbRight</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KB_LEFT_SHIFT</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@look_at_object_position</span><span class="o">.</span><span class="n">x</span> <span class="o">-=</span> <span class="n">speed</span> <span class="k">if</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KbLeft</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KB_LEFT_SHIFT</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@look_at_object_position</span><span class="o">.</span><span class="n">y</span> <span class="o">+=</span> <span class="n">speed</span> <span class="k">if</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KbUp</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KB_LEFT_SHIFT</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@look_at_object_position</span><span class="o">.</span><span class="n">y</span> <span class="o">-=</span> <span class="n">speed</span> <span class="k">if</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KbDown</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KB_LEFT_SHIFT</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@look_at_object_position</span><span class="o">.</span><span class="n">z</span> <span class="o">+=</span> <span class="n">speed</span> <span class="k">if</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KB_NUMPAD_8</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KB_LEFT_SHIFT</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@look_at_object_position</span><span class="o">.</span><span class="n">z</span> <span class="o">-=</span> <span class="n">speed</span> <span class="k">if</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KB_NUMPAD_2</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KB_LEFT_SHIFT</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To understand how everything works, I bind each axis to a key. Here is the schema to move the camera:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>UP, DOWN - by Y axis
</span><span class='line'>LEFT, RIGHT - by X axis
</span><span class='line'>NUM8, NUM2 - by Z axis
</span></code></pre></td></tr></table></div></figure>


<p>To move the target point, you need to hold shift, clicking on the same buttons.
I can display the current coordinates of points and the current camera speed using gosu’s text output methods. To do this, we need to pass a ‘window’ object into our class and work with it. For camera position, I wrote a <code>Vector3</code> class that contains x, y and z coordinates:
<code>objects/vector3.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Vector3</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">,</span> <span class="ss">:z</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>After we build our camera class, let’s use it inside <code>run.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">draw</span>
</span><span class='line'>  <span class="n">gl</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">glClear</span><span class="p">(</span><span class="no">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="no">GL_DEPTH_BUFFER_BIT</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glMatrixMode</span><span class="p">(</span><span class="no">GL_PROJECTION</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glLoadIdentity</span><span class="p">()</span>
</span><span class='line'>      <span class="n">gluPerspective</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span> <span class="n">width</span><span class="o">.</span><span class="n">to_f</span><span class="o">/</span><span class="n">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glMatrixMode</span><span class="p">(</span><span class="no">GL_MODELVIEW</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glLoadIdentity</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@camera</span><span class="o">.</span><span class="n">capture</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glPushMatrix</span>
</span><span class='line'>      <span class="n">glTranslated</span><span class="p">(</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Axis</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Cube</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="no">GL_FRONT_AND_BACK</span><span class="p">,</span> <span class="no">GL_LINE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">glPopMatrix</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Cube</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="no">GL_FRONT_AND_BACK</span><span class="p">,</span> <span class="no">GL_FILL</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Axis</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>‘Fly’ a bit on our scene to see how <code>gluLookAt</code> works.
I suggest rewriting the keyboard settings a bit to make them more useful. Also, I want to be able to increase our camera’s speed. For this I want to rewrite the camera object:
<code>objects/camera.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">button_down</span>
</span><span class='line'>  <span class="n">check_speed</span>
</span><span class='line'>  <span class="k">case</span>
</span><span class='line'>  <span class="k">when</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KbD</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@camera_position</span><span class="o">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">speed</span>
</span><span class='line'>    <span class="vi">@look_at_object_position</span><span class="o">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">speed</span>
</span><span class='line'>  <span class="k">when</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KbA</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@camera_position</span><span class="o">.</span><span class="n">x</span> <span class="o">-=</span> <span class="n">speed</span>
</span><span class='line'>    <span class="vi">@look_at_object_position</span><span class="o">.</span><span class="n">x</span> <span class="o">-=</span> <span class="n">speed</span>
</span><span class='line'>  <span class="k">when</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KbW</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@camera_position</span><span class="o">.</span><span class="n">z</span> <span class="o">-=</span> <span class="n">speed</span>
</span><span class='line'>    <span class="vi">@look_at_object_position</span><span class="o">.</span><span class="n">z</span> <span class="o">-=</span> <span class="n">speed</span>
</span><span class='line'>  <span class="k">when</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KbS</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@camera_position</span><span class="o">.</span><span class="n">z</span> <span class="o">+=</span> <span class="n">speed</span>
</span><span class='line'>    <span class="vi">@look_at_object_position</span><span class="o">.</span><span class="n">z</span> <span class="o">+=</span> <span class="n">speed</span>
</span><span class='line'>  <span class="k">when</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KbUp</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@look_at_object_position</span><span class="o">.</span><span class="n">y</span> <span class="o">+=</span> <span class="n">speed</span>
</span><span class='line'>  <span class="k">when</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KbDown</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@look_at_object_position</span><span class="o">.</span><span class="n">y</span> <span class="o">-=</span> <span class="n">speed</span>
</span><span class='line'>  <span class="k">when</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KbRight</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@look_at_object_position</span><span class="o">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">speed</span>
</span><span class='line'>  <span class="k">when</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KbLeft</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@look_at_object_position</span><span class="o">.</span><span class="n">x</span> <span class="o">-=</span> <span class="n">speed</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">check_speed</span>
</span><span class='line'>  <span class="vi">@speed</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="vi">@speed</span> <span class="o">=</span> <span class="mi">20</span> <span class="k">if</span> <span class="no">Gosu</span><span class="o">::</span><span class="n">button_down?</span><span class="p">(</span><span class="no">Gosu</span><span class="o">::</span><span class="no">KB_LEFT_SHIFT</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s use the W and S keys to move the camera on the z axis, A and D to move the camera on the x axis, UP and DOWN to move the target of view on the y axis and LEFT and RIGHT to move the target of view on the x axis. Holding shift will increase our speed.</p>

<h2>LET’S PLAY!</h2>

<p>Let’s add a cube object filled with lines to our pointer. To do this, we need to update our cube code to receive the current coordinates and build a cube depending on them.
<code>objects/cube.rb</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Cube</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:position</span><span class="p">,</span> <span class="ss">:x_width</span><span class="p">,</span> <span class="ss">:y_width</span><span class="p">,</span> <span class="ss">:z_width</span><span class="p">,</span> <span class="ss">:mode</span><span class="p">,</span> <span class="ss">:mode_face</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">,</span> <span class="n">mode_face</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@x_width</span> <span class="o">=</span> <span class="n">x_width</span>
</span><span class='line'>    <span class="vi">@y_width</span> <span class="o">=</span> <span class="n">y_width</span>
</span><span class='line'>    <span class="vi">@z_width</span> <span class="o">=</span> <span class="n">z_width</span>
</span><span class='line'>    <span class="vi">@mode</span> <span class="o">=</span> <span class="n">mode</span>
</span><span class='line'>    <span class="vi">@mode_face</span> <span class="o">=</span> <span class="n">mode_face</span>
</span><span class='line'>    <span class="vi">@position</span> <span class="o">=</span> <span class="no">Vector3</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">draw</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">,</span> <span class="n">mode_face</span> <span class="o">=</span> <span class="no">GL_FRONT_AND_BACK</span><span class="p">,</span> <span class="n">mode</span> <span class="o">=</span> <span class="no">GL_FILL</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span> <span class="o">=</span> <span class="kp">new</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">,</span> <span class="n">mode_face</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">draw</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draw</span>
</span><span class='line'>    <span class="n">glPolygonMode</span><span class="p">(</span><span class="n">mode_face</span><span class="p">,</span> <span class="n">mode</span><span class="p">);</span>
</span><span class='line'>    <span class="n">glBegin</span><span class="p">(</span><span class="no">GL_QUADS</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#yx</span>
</span><span class='line'>      <span class="n">glColor3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#yz</span>
</span><span class='line'>      <span class="n">glColor3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">z_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">z_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#zx</span>
</span><span class='line'>      <span class="n">glColor3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">z_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">z_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#z -&amp;gt; yx</span>
</span><span class='line'>      <span class="n">glColor3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">z_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">z_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">z_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">z_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#x -&amp;gt; yz</span>
</span><span class='line'>      <span class="n">glColor3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">z_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">z_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#y -&amp;gt; zx</span>
</span><span class='line'>      <span class="n">glColor3d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">z_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">z_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">glColor3d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">#return back primary color</span>
</span><span class='line'>    <span class="n">glEnd</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can update our main window’s method draw with this code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">glPushMatrix</span>
</span><span class='line'> <span class="n">glTranslated</span><span class="p">(</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'> <span class="no">Axis</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'> <span class="no">Cube</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="no">GL_FRONT_AND_BACK</span><span class="p">,</span> <span class="no">GL_FILL</span><span class="p">)</span>
</span><span class='line'> <span class="no">Cube</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="no">GL_FRONT_AND_BACK</span><span class="p">,</span> <span class="no">GL_LINE</span><span class="p">,</span> <span class="vi">@camera</span><span class="o">.</span><span class="n">look_at_object_position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="vi">@camera</span><span class="o">.</span><span class="n">look_at_object_position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="vi">@camera</span><span class="o">.</span><span class="n">look_at_object_position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'><span class="n">glPopMatrix</span>
</span></code></pre></td></tr></table></div></figure>


<p>At the end, you should see this view:</p>

<p><img src="http://akovtunov.github.io/images/ruby_opengl/diatom_opengl-14.jpg"></p>

<h2>CUBE CREATOR</h2>

<p>What if we want to place some new cubes? Easy!
Let’s change our <code>run.rb</code> code to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;opengl&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;glu&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;gosu&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="s2">&quot;objects/*&quot;</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="n">require_relative</span> <span class="n">file</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kp">include</span> <span class="no">Gl</span><span class="p">,</span> <span class="no">Glu</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Window</span> <span class="o">&lt;</span> <span class="no">Gosu</span><span class="o">::</span><span class="no">Window</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:scene_objects</span><span class="p">,</span> <span class="ss">:translation</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="k">super</span> <span class="mi">800</span><span class="p">,</span> <span class="mi">600</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">caption</span> <span class="o">=</span> <span class="s2">&quot;Diatom&#39;s OpenGL Tutorial&quot;</span>
</span><span class='line'>    <span class="vi">@camera</span> <span class="o">=</span> <span class="no">Camera</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@scene_objects</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@translation</span> <span class="o">=</span> <span class="no">Vector3</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draw</span>
</span><span class='line'>    <span class="n">gl</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">glClear</span><span class="p">(</span><span class="no">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="no">GL_DEPTH_BUFFER_BIT</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">glMatrixMode</span><span class="p">(</span><span class="no">GL_PROJECTION</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glLoadIdentity</span><span class="p">()</span>
</span><span class='line'>      <span class="n">gluPerspective</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span> <span class="n">width</span><span class="o">.</span><span class="n">to_f</span><span class="o">/</span><span class="n">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glMatrixMode</span><span class="p">(</span><span class="no">GL_MODELVIEW</span><span class="p">)</span>
</span><span class='line'>      <span class="n">glLoadIdentity</span><span class="p">()</span>
</span><span class='line'>      <span class="vi">@camera</span><span class="o">.</span><span class="n">capture</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@scene_objects</span> <span class="o">&lt;&lt;</span> <span class="no">Axis</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@scene_objects</span> <span class="o">&lt;&lt;</span> <span class="no">Cube</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="no">GL_FRONT_AND_BACK</span><span class="p">,</span> <span class="no">GL_FILL</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">glPushMatrix</span>
</span><span class='line'>        <span class="n">glTranslated</span><span class="p">(</span><span class="n">translation</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">translation</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">translation</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@scene_objects</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">object</span><span class="o">|</span>
</span><span class='line'>          <span class="n">object</span><span class="o">.</span><span class="n">draw</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="n">glPopMatrix</span>
</span><span class='line'>      <span class="no">Cube</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="no">GL_FRONT_AND_BACK</span><span class="p">,</span> <span class="no">GL_LINE</span><span class="p">,</span> <span class="vi">@camera</span><span class="o">.</span><span class="n">look_at_object_position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="vi">@camera</span><span class="o">.</span><span class="n">look_at_object_position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="vi">@camera</span><span class="o">.</span><span class="n">look_at_object_position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">Cube</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="no">GL_FRONT_AND_BACK</span><span class="p">,</span> <span class="no">GL_FILL</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">Axis</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">button_down</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">exit</span> <span class="k">if</span> <span class="nb">id</span> <span class="o">==</span> <span class="no">Gosu</span><span class="o">::</span><span class="no">KbEscape</span>
</span><span class='line'>    <span class="n">add_cube</span> <span class="k">if</span> <span class="nb">id</span> <span class="o">==</span> <span class="no">Gosu</span><span class="o">::</span><span class="no">KbSpace</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_cube</span>
</span><span class='line'>    <span class="vi">@scene_objects</span> <span class="o">&lt;&lt;</span> <span class="no">Cube</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>      <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span>
</span><span class='line'>      <span class="no">GL_FRONT_AND_BACK</span><span class="p">,</span> <span class="no">GL_FILL</span><span class="p">,</span>
</span><span class='line'>      <span class="vi">@camera</span><span class="o">.</span><span class="n">look_at_object_position</span><span class="o">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">translation</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="vi">@camera</span><span class="o">.</span><span class="n">look_at_object_position</span><span class="o">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">translation</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="vi">@camera</span><span class="o">.</span><span class="n">look_at_object_position</span><span class="o">.</span><span class="n">z</span> <span class="o">-</span> <span class="n">translation</span><span class="o">.</span><span class="n">z</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Window</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">show</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you will notice, I moved the translation vector to the variable of Vector3 class, moved all objects that will be translated and drawn on the scene to the array <code>@scene_objects</code> and then placed them on the scene with a loop.
To add a new cube, I can just create a new cube object and place it in the array. Coordinates should depend on the translation vector to place everything on valid places.</p>

<p><img src="http://akovtunov.github.io/images/ruby_opengl/diatom_opengl-28.jpg"></p>

<p>Let’s add some textures. We can create a gosu image object from file and then get texture information from it with the <code>gl_tex_info</code> method. To build it, let’s add a class <code>texture</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Texture</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:info</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="n">filepath</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@image</span> <span class="o">=</span> <span class="no">Gosu</span><span class="o">::</span><span class="no">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="n">filepath</span><span class="p">,</span> <span class="p">{</span><span class="ss">tileable</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">retro</span><span class="p">:</span> <span class="kp">false</span><span class="p">})</span>
</span><span class='line'>    <span class="vi">@info</span> <span class="o">=</span> <span class="vi">@image</span><span class="o">.</span><span class="n">gl_tex_info</span>
</span><span class='line'>    <span class="c1"># gl_tex_info can return nil if the image was too large to fit onto</span>
</span><span class='line'>    <span class="c1"># a single OpenGL texture and was internally split up.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we will need to update our cube <code>draw</code> method with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">texture_info</span> <span class="o">=</span> <span class="n">texture</span><span class="o">.</span><span class="n">info</span>
</span><span class='line'>  <span class="n">glEnable</span><span class="p">(</span><span class="no">GL_TEXTURE_2D</span><span class="p">)</span> <span class="c1"># enables two-dimensional texturing to perform</span>
</span><span class='line'>    <span class="n">glBindTexture</span><span class="p">(</span><span class="no">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture_info</span><span class="o">.</span><span class="n">tex_name</span><span class="p">)</span> <span class="c1"># bing named texture to a target</span>
</span><span class='line'>    <span class="n">glPixelStorei</span><span class="p">(</span><span class="no">GL_UNPACK_ALIGNMENT</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">draw_textured_cube</span>
</span><span class='line'>  <span class="n">glDisable</span><span class="p">(</span><span class="no">GL_TEXTURE_2D</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>where specify the texture’s edge that will be assigned to that point. Basically, the texture’s left bottom coordinates are (0, 0) and top right coordinates are (1, 1), and we stretch it between the edges of our cube. Code sample for one side:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">glTexCoord2d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="n">glVertex3d</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'><span class="n">glTexCoord2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'><span class="n">glTexCoord2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span> <span class="n">glVertex3d</span><span class="p">(</span><span class="n">x_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'><span class="n">glTexCoord2d</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span> <span class="n">glVertex3d</span><span class="p">(</span><span class="n">position</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y_width</span> <span class="o">+</span> <span class="n">position</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">position</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>By adding some lights with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">glEnable</span><span class="p">(</span><span class="no">GL_LIGHTING</span><span class="p">)</span>
</span><span class='line'>  <span class="n">glLightfv</span><span class="p">(</span><span class="no">GL_LIGHT0</span><span class="p">,</span> <span class="no">GL_AMBIENT</span><span class="p">,</span> <span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">glLightfv</span><span class="p">(</span><span class="no">GL_LIGHT0</span><span class="p">,</span> <span class="no">GL_DIFFUSE</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">glLightfv</span><span class="p">(</span><span class="no">GL_LIGHT0</span><span class="p">,</span> <span class="no">GL_POSITION</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">glLightfv</span><span class="p">(</span><span class="no">GL_LIGHT1</span><span class="p">,</span> <span class="no">GL_AMBIENT</span><span class="p">,</span> <span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">glLightfv</span><span class="p">(</span><span class="no">GL_LIGHT1</span><span class="p">,</span> <span class="no">GL_DIFFUSE</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">glLightfv</span><span class="p">(</span><span class="no">GL_LIGHT1</span><span class="p">,</span> <span class="no">GL_POSITION</span><span class="p">,</span> <span class="o">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">glEnable</span><span class="p">(</span><span class="no">GL_LIGHT0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>depth test to depth buffer comparisons</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">glEnable</span><span class="p">(</span><span class="no">GL_DEPTH_TEST</span><span class="p">);</span>
</span><span class='line'><span class="n">glDepthMask</span><span class="p">(</span><span class="no">GL_TRUE</span><span class="p">);</span>
</span><span class='line'><span class="n">glDepthFunc</span><span class="p">(</span><span class="no">GL_LEQUAL</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>and textures with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">glEnable</span><span class="p">(</span><span class="no">GL_TEXTURE_2D</span><span class="p">)</span> <span class="c1"># enables two-dimensional texturing to perform</span>
</span><span class='line'><span class="n">glBindTexture</span><span class="p">(</span><span class="no">GL_TEXTURE_2D</span><span class="p">,</span> <span class="n">texture_info</span><span class="o">.</span><span class="n">tex_name</span><span class="p">)</span> <span class="c1"># bing named texture to a target</span>
</span><span class='line'><span class="n">glPixelStorei</span><span class="p">(</span><span class="no">GL_UNPACK_ALIGNMENT</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>we can build nice textured scene with real lighting.</p>

<p><img src="http://akovtunov.github.io/images/ruby_opengl/diatom_opengl.jpg"></p>

<p>With some additional work, we can achieve a switch of material for blocks that we are trying to build and other nice things.</p>

<p>Video: <a href="https://youtu.be/aKyR4a5SGbo">YouTube</a>
All the code for that can be found at <a href="https://github.com/DiatomEnterprises/ruby_opengl">our repository on GitHub</a></p>

<p>OpenGL is common everywhere and learning it once, you will be able to build projects with it on any language. The same is with Ruby. Just imagine something cool, and we can build it with Ruby!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gamedev on Ruby? Why Not!]]></title>
    <link href="http://akovtunov.github.io/blog/2017/04/23/gamedev-on-ruby-why-not/"/>
    <updated>2017-04-23T12:18:04+02:00</updated>
    <id>http://akovtunov.github.io/blog/2017/04/23/gamedev-on-ruby-why-not</id>
    <content type="html"><![CDATA[<blockquote><p>This is a copy of my <a href="http://www.diatomenterprises.com/gamedev-on-ruby-why-not/">original post for Diatom Enterprises</a></p></blockquote>

<p><img class="center" src="http://akovtunov.github.io/images/ruby_snake/Screenshot-from-2016-08-17-034112.png"></p>

<p>This article isn’t about big games with sophisticated graphics, nor will I be creating something like MMORPG (even though, I think it’s possible). In this article, I will be creating a terminal Snake Game.
I know a lot of developers; including myself, who got started in programming, because they were crazy about games. They wanted to create something similar to what they had played before, but in the end, for some reason they are doing programming that has nothing to do with gamedev. So in this article I will be going though the steps to create a simple game in <a href="http://www.diatomenterprises.com/technologies/ruby-on-rails/">Ruby language</a>, which most of us use for various web-applications.</p>

<!--more-->


<h2>PREPARATIONS</h2>

<p>I prefer to use ruby 2.3.1 with structured code and folders. For the Snake Game, I recommend the following folder structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby_snake/
</span><span class='line'>–lib/
</span><span class='line'>|– Files that will create game mechanics
</span><span class='line'>–spec/
</span><span class='line'>|– spec_helper.rb
</span><span class='line'>|– Test files
</span><span class='line'>Gemfile
</span><span class='line'>start.rb</span></code></pre></td></tr></table></div></figure>


<p>The <code>Gemfile</code> contains a few gems: RSpec for tests and Pry for debugging our application. <code>Gemfile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rspec&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;pry&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For <code>rspec</code>, setup a <code>spec_helper.rb</code>. This file will contain each lib file and configure RSpec for our needs. <code>spec/spec_helper.rb</code> should be included in each test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../lib/*.rb&#39;</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">))</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">require</span> <span class="n">file</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../lib/errors/*.rb&#39;</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">))</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">require</span> <span class="n">file</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># Use color in STDOUT</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">color</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Use color not only in STDOUT but also in pagers and files</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">tty</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Use the specified formatter</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">formatter</span> <span class="o">=</span> <span class="ss">:documentation</span> <span class="c1"># :progress, :html, :textmate</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>THE STRUCTURE OF THE GAME</h2>

<p>Can you imagine all the game components? It should look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>. . . . . . . . .
</span><span class='line'>. . . . . . . . .
</span><span class='line'>. . . . . . . . .
</span><span class='line'>. . . . . . . . .
</span><span class='line'>. . x x x x . o .
</span><span class='line'>. . . . . . . . .
</span><span class='line'>. . . . . . . . .
</span><span class='line'>. . . . . . . . .
</span><span class='line'>. . . . . . . . .</span></code></pre></td></tr></table></div></figure>


<p>Here you can see the <code>Board</code>, the <code>Snake</code> and the <code>Food</code>.
In addition, you will need something that will connect all these things together – the <code>Game</code>.
Let’s look closely at these components.</p>

<h2>THE BOARD</h2>

<p>The <code>Board</code> has a width and a length, in our sample the width is 9 and the length is 9.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  1 2 3 4 5 6 7 8 9
</span><span class='line'>1 . . . . . . . . .
</span><span class='line'>2 . . . . . . . . .
</span><span class='line'>3 . . . . . . . . .
</span><span class='line'>4 . . . . . . . . .
</span><span class='line'>5 . . . . . . . . .
</span><span class='line'>6 . . . . . . . . .
</span><span class='line'>7 . . . . . . . . .
</span><span class='line'>8 . . . . . . . . .
</span><span class='line'>9 . . . . . . . . .</span></code></pre></td></tr></table></div></figure>


<p>So, let’s write some tests that will cover our Board.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Board</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#new&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;initializes gameboard with board&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="no">Board</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span><span class="mi">40</span><span class="p">)</span><span class="o">.</span><span class="n">board</span><span class="p">)</span><span class="o">.</span><span class="n">not_to</span> <span class="n">be_nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#create_board&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:gameboard</span><span class="p">){</span><span class="no">Board</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span><span class="mi">40</span><span class="p">)}</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;returns an array&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">gameboard</span><span class="o">.</span><span class="n">board</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_instance_of</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;returns an array with given size&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">gameboard</span><span class="o">.</span><span class="n">board</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_eql</span><span class="p">(</span><span class="mi">40</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">gameboard</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_eql</span><span class="p">(</span><span class="mi">40</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;returns board full of . symbols&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">gameboard</span><span class="o">.</span><span class="n">board</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">first</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And specifically this will create our Board and its methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Board</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:length</span><span class="p">,</span> <span class="ss">:width</span><span class="p">,</span> <span class="ss">:board</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@length</span> <span class="o">=</span> <span class="n">length</span>
</span><span class='line'>    <span class="vi">@width</span> <span class="o">=</span> <span class="n">width</span>
</span><span class='line'>    <span class="n">create_board</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">center</span>
</span><span class='line'>    <span class="o">[</span><span class="n">board</span><span class="o">.</span><span class="n">length</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">board</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">length</span><span class="o">/</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_text</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="n">char_center</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">length</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">text</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">char</span><span class="o">|</span>
</span><span class='line'>      <span class="n">board</span><span class="o">[</span><span class="n">center</span><span class="o">.</span><span class="n">first</span><span class="o">][</span><span class="n">center</span><span class="o">.</span><span class="n">last</span> <span class="o">-</span> <span class="n">char_center</span> <span class="o">+</span> <span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">char</span>
</span><span class='line'>      <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_board</span>
</span><span class='line'>    <span class="vi">@board</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">length</span><span class="p">){</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can’t change the <code>length</code>, or the <code>width</code> of the board or the board itself after initialization, so I have made them readable only.
Let’s walk through the code.</p>

<ul>
<li><code>center</code> – will calculate center points of the created Board;</li>
<li><code>print_text</code> – will print the given text in the middle of the Board;</li>
<li><code>create_board</code> – will create the Board and fill it with <code>“.”</code> to show this later on the screen.
Did you notice that I used a <code>block</code> to create an array, instead of <code>Array.new (length, Array.new(width, '.'))</code>?
At first sight the lines looks similar to each other, but if we look under the hood, you will notice that the block creates array each time, so <code>array[0].object_id</code> won’t be the same as: <code>array[1].object_id</code>.
And without the <code>block</code>, arrays will be identical.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">array</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">length</span><span class="p">){</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]]</span>
</span><span class='line'><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">object_id</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">5689040</span>
</span><span class='line'><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">array</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">object_id</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">5689000</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">array2</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">))</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;.&quot;</span><span class="o">]]</span>
</span><span class='line'><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">array2</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">object_id</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">14755060</span>
</span><span class='line'><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">array2</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">object_id</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">14755060</span>
</span></code></pre></td></tr></table></div></figure>


<p>If make changes in the first line, this will immediately lead to changes in another.</p>

<h2>THE SNAKE</h2>

<p>After you have created a board sample, it is time to create your ‘hero’! Here is the file to set the requirements for the snake and to tests your future snake <code>snake_spec.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Snake</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:snake</span><span class="p">){</span><span class="no">Snake</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)}</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#new&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:snake</span><span class="p">){</span><span class="no">Snake</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)}</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;snake is an array of body parts&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_kind_of</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_eql</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;initializes snake head position&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">first</span><span class="p">)</span><span class="o">.</span><span class="n">not_to</span> <span class="n">be_nil</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">first</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_kind_of</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_eql</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">first</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_kind_of</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">last</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_kind_of</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;initializes snake length&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_eql</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;initializes snake direction&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">direction</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_eql</span><span class="p">(</span><span class="ss">:left</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;#step should add one part and remove the last one from the snake&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">old_snake</span> <span class="o">=</span> <span class="n">snake</span>
</span><span class='line'>      <span class="n">new_head</span> <span class="o">=</span> <span class="o">[</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">first</span><span class="p">,</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">last</span><span class="o">]</span>
</span><span class='line'>      <span class="n">old_snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">new_head</span><span class="p">)</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'>    <span class="n">snake</span><span class="o">.</span><span class="n">step</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_eql</span><span class="p">(</span><span class="n">old_snake</span><span class="o">.</span><span class="n">parts</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;#turn should change snake&#39;s direction&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">snake</span><span class="o">.</span><span class="n">turn</span><span class="p">(</span><span class="s1">&#39;w&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">direction</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="ss">:up</span><span class="p">)</span>
</span><span class='line'>    <span class="n">snake</span><span class="o">.</span><span class="n">turn</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">direction</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="ss">:left</span><span class="p">)</span>
</span><span class='line'>    <span class="n">snake</span><span class="o">.</span><span class="n">turn</span><span class="p">(</span><span class="s1">&#39;s&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">direction</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="ss">:down</span><span class="p">)</span>
</span><span class='line'>    <span class="n">snake</span><span class="o">.</span><span class="n">turn</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">direction</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="ss">:right</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;#update_head updates snake&#39;s head position if snake mets wall&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">snake_head</span> <span class="o">=</span> <span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="n">snake_head</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">snake</span><span class="o">.</span><span class="n">update_head</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">first</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_eql</span><span class="p">(</span><span class="n">snake_head</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;#increase increases snake after food being eaten&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">{</span><span class="n">snake</span><span class="o">.</span><span class="n">increase</span><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">{</span><span class="n">snake</span><span class="o">.</span><span class="n">size</span><span class="p">}</span><span class="o">.</span><span class="n">from</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">{</span><span class="n">snake</span><span class="o">.</span><span class="n">increase</span><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">{</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">length</span><span class="p">}</span><span class="o">.</span><span class="n">from</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I want the <code>Snake</code> to be an array of ‘parts’, which means a small <code>array</code> of coordinates.
Let me explain this. Let’s draw our Snake as an array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.     .     .     .     .     .     .     .     .
</span><span class='line'>
</span><span class='line'>.     .     .     .     .     .     .     .     .
</span><span class='line'>.     .     .     .     .     .     .     .     .
</span><span class='line'>
</span><span class='line'>.     .     .     .     .     .     .     .     .
</span><span class='line'>
</span><span class='line'>.     .   [2,4] [3,4] [4,4] [5,4]   .     .     .
</span><span class='line'>
</span><span class='line'>.     .     .     .     .     .     .     .     .
</span><span class='line'>
</span><span class='line'>.     .     .     .     .     .     .     .     .
</span><span class='line'>
</span><span class='line'>.     .     .     .     .     .     .     .     .
</span><span class='line'>
</span><span class='line'>.     .     .     .     .     .     .     .     .</span></code></pre></td></tr></table></div></figure>


<p>Now, if you need to move the Snake or change its direction, you can manage those blocks. You can add a part to the head and remove the last part from the tail. Or if the Snake eats the food block, you can just add it to the tail as well!
Turning the Snake is quite simple. You can add block in any direction from the current head block and remove the Snake’s last tail element. The Snake can be moved by one part in any direction.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.     .     .     .     .     .     .     .     .
</span><span class='line'>
</span><span class='line'>.     .     .     .     .     .     .     .     .
</span><span class='line'>.     .     .     .     .     .     .     .     .
</span><span class='line'>
</span><span class='line'>.     .     .     .     .     .     .     .     .
</span><span class='line'>
</span><span class='line'>.     .   [2,4] [3,4] [4,4]   .     .     .     .
</span><span class='line'>
</span><span class='line'>.     .   [2,5]   .     .     .     .     .     .
</span><span class='line'>
</span><span class='line'>.     .     .     .     .     .     .     .     .
</span><span class='line'>
</span><span class='line'>.     .     .     .     .     .     .     .     .
</span><span class='line'>
</span><span class='line'>.     .     .     .     .     .     .     .     .</span></code></pre></td></tr></table></div></figure>


<p>You will now need to create the Snake part with new coordinates, taking blocks from the head and changing its positions depending on the direction. Then, you can use <code>parts.unshift(new_head)</code> to add the new block to the beginning and <code>parts.pop</code> to remove the last one from the array.
If the snake eats ‘food’, you will create another part at the end of the Snake and update its size. If the snake meets the wall, you can simply move it to the other wall by changing its head coordinates.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Snake</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:size</span><span class="p">,</span> <span class="ss">:direction</span><span class="p">,</span> <span class="ss">:position</span><span class="p">,</span> <span class="ss">:parts</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">max_x</span><span class="p">,</span> <span class="n">max_y</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@size</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>    <span class="vi">@direction</span> <span class="o">=</span> <span class="ss">:left</span>
</span><span class='line'>    <span class="vi">@parts</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">set_start_position</span><span class="p">(</span><span class="n">max_x</span><span class="p">,</span> <span class="n">max_y</span><span class="p">)</span>
</span><span class='line'>    <span class="n">create_snake</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_snake</span>
</span><span class='line'>    <span class="n">size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">iteration</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@parts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">[</span><span class="n">position</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">position</span><span class="o">[</span><span class="mi">1</span><span class="o">]+</span><span class="n">iteration</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">head</span>
</span><span class='line'>    <span class="n">parts</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">body</span>
</span><span class='line'>    <span class="n">parts</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.parts</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_start_position</span><span class="p">(</span><span class="n">max_x</span><span class="p">,</span> <span class="n">max_y</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@position</span> <span class="o">=</span> <span class="o">[</span><span class="no">Random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.max_x</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="no">Random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.max_y</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">increase</span>
</span><span class='line'>    <span class="vi">@size</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="vi">@parts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">parts</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update_head</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@parts</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">turn</span><span class="p">(</span><span class="n">key_code</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@direction</span> <span class="o">=</span> <span class="k">case</span> <span class="n">key_code</span><span class="o">.</span><span class="n">chr</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;w&#39;</span> <span class="o">||</span> <span class="s1">&#39;W&#39;</span>
</span><span class='line'>      <span class="ss">:up</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;s&#39;</span> <span class="o">||</span> <span class="s1">&#39;S&#39;</span>
</span><span class='line'>      <span class="ss">:down</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;a&#39;</span> <span class="o">||</span> <span class="s1">&#39;A&#39;</span>
</span><span class='line'>      <span class="ss">:left</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;d&#39;</span> <span class="o">||</span> <span class="s1">&#39;D&#39;</span>
</span><span class='line'>      <span class="ss">:right</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">direction</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">step</span>
</span><span class='line'>    <span class="n">new_head</span> <span class="o">=</span> <span class="o">[</span><span class="n">head</span><span class="o">.</span><span class="n">first</span><span class="p">,</span><span class="n">head</span><span class="o">.</span><span class="n">last</span><span class="o">]</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">direction</span>
</span><span class='line'>    <span class="k">when</span> <span class="ss">:left</span>
</span><span class='line'>      <span class="n">new_head</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">when</span> <span class="ss">:right</span>
</span><span class='line'>      <span class="n">new_head</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">when</span> <span class="ss">:up</span>
</span><span class='line'>      <span class="n">new_head</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">when</span> <span class="ss">:down</span>
</span><span class='line'>      <span class="n">new_head</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">parts</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">new_head</span><span class="p">)</span>
</span><span class='line'>    <span class="n">parts</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s walk through the code.</p>

<ul>
<li><code>initialize</code> – creates start parameters for the Snake, sets start position and creates the Snake.</li>
<li><code>create_snake</code> – creates Snake, using size variable to define Snake’s length.</li>
<li><code>head</code> – returns head part of Snake</li>
<li><code>body</code> – returns all other parts, that you can call as ‘body’</li>
<li><code>set_start_position</code> – randomly set start position of the Snake</li>
<li><code>update_head</code> – updates head, if snake meet wall</li>
<li><code>increase</code> – increases snake’s size, if the Snake eats food</li>
<li><code>turn</code> – changes Snake’s direction</li>
<li><code>step</code> – moves Snake’s each iteration</li>
</ul>


<p>Now your Snake needs to eat something. Let’s write the <code>Food</code> object!</p>

<h2>FEEDING THE SNAKE</h2>

<p>Food is a small object, that has only two coordinates, it will be reinitialized the moment after the Snake will eats it.
Let me describe it, using tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Food</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:food_item</span><span class="p">){</span> <span class="no">Food</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#new&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;initializes food item with start coords&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">food_item</span><span class="p">)</span><span class="o">.</span><span class="n">not_to</span> <span class="n">be_nil</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">food_item</span><span class="o">.</span><span class="n">x</span><span class="p">)</span><span class="o">.</span><span class="n">not_to</span> <span class="n">be_nil</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">food_item</span><span class="o">.</span><span class="n">y</span><span class="p">)</span><span class="o">.</span><span class="n">not_to</span> <span class="n">be_nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;#coordinates returns array of food&#39;s coords&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">food_item</span><span class="o">.</span><span class="n">coordinates</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="o">[</span><span class="n">food_item</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">food_item</span><span class="o">.</span><span class="n">y</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Later, when the Snake’s head coordinates are over a Food coordinates, the game will show that the Snake ate the food. The snake will then increase in size and the Food object will reinitialize. That’s why the Food should be randomly generated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Food</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">board_max_x</span><span class="p">,</span> <span class="n">board_max_y</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@x</span> <span class="o">=</span> <span class="no">Random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="n">board_max_x</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@y</span> <span class="o">=</span> <span class="no">Random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="n">board_max_y</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">coordinates</span>
</span><span class='line'>    <span class="o">[</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>What will happen, if the Snake chooses to eat itself? You will need to create some errors for this case.</p>

<h2>THROWING ERROR</h2>

<p>We can create different errors for different cases. For example, the Snake can meet walls sometimes, through which it could go through or which it could eat. If you would like to create some blocks, it may randomly appear on the Board and the Snake will smash into them. For this situations you need to create some errors.
I created <code>lib/errors/ate_itself_error.rb</code> file for these situations, such as The Snake eating itself.
It easily creates a new error class to determine the situation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AteItselfError</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will use it later in our <code>Game</code> class.</p>

<h2>THE GAME MECHANICS</h2>

<p>Now it’s time to write the mechanics for the Game.
I have created a list of requirements, excluding the ones that show our information at the terminal.
<code>spec/game_spec.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Game</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:new_game</span><span class="p">)</span> <span class="p">{</span><span class="no">Game</span><span class="o">.</span><span class="n">new</span><span class="p">}</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#new&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;initializes game&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">new_game</span><span class="o">.</span><span class="n">gameboard</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_kind_of</span><span class="p">(</span><span class="no">Board</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">new_game</span><span class="o">.</span><span class="n">snake</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_kind_of</span><span class="p">(</span><span class="no">Snake</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">new_game</span><span class="o">.</span><span class="n">food</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_kind_of</span><span class="p">(</span><span class="no">Food</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;#check_snake_position checks all checks successfully&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">{</span><span class="n">new_game</span><span class="o">.</span><span class="n">check_snake_position</span><span class="p">}</span><span class="o">.</span><span class="n">to_not</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">AteItselfError</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">{</span><span class="n">new_game</span><span class="o">.</span><span class="n">check_snake_position</span><span class="p">}</span><span class="o">.</span><span class="n">to_not</span> <span class="n">change</span><span class="p">{</span><span class="n">new_game</span><span class="o">.</span><span class="n">snake</span><span class="o">.</span><span class="n">body</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;#check_if_snake_ate_itself&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">new_game</span><span class="o">.</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">new_game</span><span class="o">.</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">{</span><span class="n">new_game</span><span class="o">.</span><span class="n">check_if_snake_ate_itself</span><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">AteItselfError</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">{</span><span class="n">new_game</span><span class="o">.</span><span class="n">check_snake_position</span><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">AteItselfError</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;#check_if_snake_met_wall&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">new_game</span><span class="o">.</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">new_game</span><span class="o">.</span><span class="n">gameboard</span><span class="o">.</span><span class="n">width</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">{</span><span class="n">new_game</span><span class="o">.</span><span class="n">check_if_snake_met_wall</span><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">{</span><span class="n">new_game</span><span class="o">.</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span><span class="p">}</span><span class="o">.</span><span class="n">from</span><span class="p">(</span><span class="n">new_game</span><span class="o">.</span><span class="n">gameboard</span><span class="o">.</span><span class="n">width</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_game</span><span class="o">.</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">new_game</span><span class="o">.</span><span class="n">gameboard</span><span class="o">.</span><span class="n">width</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">{</span><span class="n">new_game</span><span class="o">.</span><span class="n">check_snake_position</span><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">{</span><span class="n">new_game</span><span class="o">.</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span><span class="p">}</span><span class="o">.</span><span class="n">from</span><span class="p">(</span><span class="n">new_game</span><span class="o">.</span><span class="n">gameboard</span><span class="o">.</span><span class="n">width</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;#check_if_snake_ate_food&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">new_game</span><span class="o">.</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">new_game</span><span class="o">.</span><span class="n">food</span><span class="o">.</span><span class="n">coordinates</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">{</span><span class="n">new_game</span><span class="o">.</span><span class="n">check_if_snake_ate_food</span><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">{</span><span class="n">new_game</span><span class="o">.</span><span class="n">snake</span><span class="o">.</span><span class="n">size</span><span class="p">}</span><span class="o">.</span><span class="n">from</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">new_game</span><span class="o">.</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">new_game</span><span class="o">.</span><span class="n">food</span><span class="o">.</span><span class="n">coordinates</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">{</span><span class="n">new_game</span><span class="o">.</span><span class="n">check_snake_position</span><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">{</span><span class="n">new_game</span><span class="o">.</span><span class="n">snake</span><span class="o">.</span><span class="n">size</span><span class="p">}</span><span class="o">.</span><span class="n">from</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;#compares pressed key&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">new_game</span><span class="o">.</span><span class="n">compare_key</span><span class="p">(</span><span class="mi">65</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">be_truthy</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">new_game</span><span class="o">.</span><span class="n">compare_key</span><span class="p">(</span><span class="mi">65</span><span class="p">,</span> <span class="s1">&#39;A&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">be_truthy</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">new_game</span><span class="o">.</span><span class="n">compare_key</span><span class="p">(</span><span class="mi">65</span><span class="p">,</span> <span class="s1">&#39;Q&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">be_falsey</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;#execute_action quit on Q&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">new_game</span><span class="o">.</span><span class="n">execute_action</span><span class="p">(</span><span class="s1">&#39;q&#39;</span><span class="o">.</span><span class="n">ord</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;#execute_action turn on a&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">{</span><span class="n">new_game</span><span class="o">.</span><span class="n">execute_action</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="o">.</span><span class="n">ord</span><span class="p">)}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">{</span><span class="n">new_game</span><span class="o">.</span><span class="n">snake</span><span class="o">.</span><span class="n">direction</span><span class="p">}</span><span class="o">.</span><span class="n">from</span><span class="p">(</span><span class="ss">:left</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="ss">:right</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">new_game</span><span class="o">.</span><span class="n">execute_action</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="o">.</span><span class="n">ord</span><span class="p">))</span><span class="o">.</span><span class="n">not_to</span> <span class="n">be_nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, now you have identified that your game will create the <code>Snake</code>, the <code>Board</code> and the <code>Food</code> object for you. Then it will be able to check Snake’s position. Checking the Snake’s positions consists of a few steps – to check, if the Snake has eaten itself or not, to check if the Snake has met at wall and to check, if the Snake has eaten food.
Our game must be able to get a key from the keyboard and compare receiver’s value with some char that will turn the Snake or make some game actions. Comparing it, should execute some actions. For example, quit game on <code>Q</code> or turn snake on <code>d</code>.
Now it’s time to see how this Ruby code will work!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;io/console&#39;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Game</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:gameboard</span><span class="p">,</span> <span class="ss">:snake</span><span class="p">,</span> <span class="ss">:food</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">max_x</span><span class="o">=</span><span class="mi">11</span><span class="p">,</span> <span class="n">max_y</span><span class="o">=</span><span class="mi">11</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@gameboard</span> <span class="o">=</span> <span class="no">Board</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">max_x</span><span class="p">,</span> <span class="n">max_y</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@snake</span> <span class="o">=</span> <span class="no">Snake</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">gameboard</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">gameboard</span><span class="o">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@food</span> <span class="o">=</span> <span class="no">Food</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">gameboard</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">gameboard</span><span class="o">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_board</span>
</span><span class='line'>    <span class="nb">system</span><span class="p">(</span><span class="s1">&#39;clear&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Your size is: </span><span class="si">#{</span><span class="n">snake</span><span class="o">.</span><span class="n">size</span><span class="si">}</span><span class="s2"> |  [Q]uit&quot;</span>
</span><span class='line'>    <span class="n">gameboard</span><span class="o">.</span><span class="n">board</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span>
</span><span class='line'>      <span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">line</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">item</span><span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draw_food_and_snake</span>
</span><span class='line'>    <span class="n">gameboard</span><span class="o">.</span><span class="n">create_board</span>
</span><span class='line'>    <span class="vi">@gameboard</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="n">food</span><span class="o">.</span><span class="n">x</span><span class="o">][</span><span class="n">food</span><span class="o">.</span><span class="n">y</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;o&#39;</span>
</span><span class='line'>    <span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">part</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@gameboard</span><span class="o">.</span><span class="n">board</span><span class="o">[</span><span class="n">part</span><span class="o">.</span><span class="n">first</span><span class="o">][</span><span class="n">part</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;x&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">print_board</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show_message</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="n">gameboard</span><span class="o">.</span><span class="n">create_board</span>
</span><span class='line'>    <span class="n">gameboard</span><span class="o">.</span><span class="n">print_text</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="n">print_board</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show_start_screen</span>
</span><span class='line'>    <span class="n">start</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">start</span> <span class="o">==</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">show_message</span><span class="p">(</span><span class="s2">&quot;[S]tart&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">key</span> <span class="o">=</span> <span class="no">GetKey</span><span class="o">.</span><span class="n">getkey</span>
</span><span class='line'>      <span class="nb">sleep</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">key</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">compare_key</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="s1">&#39;s&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">start</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">check_snake_position</span>
</span><span class='line'>    <span class="n">check_if_snake_met_wall</span>
</span><span class='line'>    <span class="n">check_if_snake_ate_food</span>
</span><span class='line'>    <span class="n">check_if_snake_ate_itself</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">check_if_snake_ate_itself</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">snake</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">include?</span> <span class="n">snake</span><span class="o">.</span><span class="n">head</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">AteItselfError</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">check_if_snake_met_wall</span>
</span><span class='line'>    <span class="n">snake</span><span class="o">.</span><span class="n">update_head</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="k">if</span> <span class="n">snake</span><span class="o">.</span><span class="n">head</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">gameboard</span><span class="o">.</span><span class="n">width</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="n">snake</span><span class="o">.</span><span class="n">update_head</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">gameboard</span><span class="o">.</span><span class="n">width</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">snake</span><span class="o">.</span><span class="n">head</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>  <span class="n">gameboard</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="n">snake</span><span class="o">.</span><span class="n">update_head</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">gameboard</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">snake</span><span class="o">.</span><span class="n">head</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">check_if_snake_ate_food</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">snake</span><span class="o">.</span><span class="n">head</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">food</span><span class="o">.</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">snake</span><span class="o">.</span><span class="n">head</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">food</span><span class="o">.</span><span class="n">y</span>
</span><span class='line'>      <span class="n">snake</span><span class="o">.</span><span class="n">increase</span>
</span><span class='line'>      <span class="vi">@food</span> <span class="o">=</span> <span class="no">Food</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">gameboard</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">gameboard</span><span class="o">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">start</span>
</span><span class='line'>    <span class="n">show_start_screen</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="n">tick</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">AteItselfError</span>
</span><span class='line'>      <span class="n">show_message</span><span class="p">(</span><span class="s2">&quot;Game over&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tick</span>
</span><span class='line'>    <span class="n">in_game</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">in_game</span>
</span><span class='line'>      <span class="n">draw_food_and_snake</span>
</span><span class='line'>      <span class="nb">sleep</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">key</span> <span class="o">=</span> <span class="no">GetKey</span><span class="o">.</span><span class="n">getkey</span>
</span><span class='line'>        <span class="n">in_game</span> <span class="o">=</span> <span class="n">execute_action</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">snake</span><span class="o">.</span><span class="n">step</span>
</span><span class='line'>      <span class="n">check_snake_position</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">show_message</span><span class="p">(</span><span class="s2">&quot;Game quit&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">execute_action</span> <span class="n">key</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">compare_key</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="s1">&#39;q&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">snake</span><span class="o">.</span><span class="n">turn</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">compare_key</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">char</span><span class="p">)</span>
</span><span class='line'>    <span class="n">key</span><span class="o">.</span><span class="n">chr</span> <span class="o">==</span> <span class="n">char</span><span class="o">.</span><span class="n">downcase</span> <span class="o">||</span> <span class="n">key</span><span class="o">.</span><span class="n">chr</span> <span class="o">==</span> <span class="n">char</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s walk through the code.</p>

<ul>
<li><code>initialize</code> – creates the <code>Snake</code>, the <code>Board</code> and the <code>Food</code> objects;;</li>
<li><code>tick</code> – the main method that re-renders the Board and all objects in it, checks position, sets direction each 0.1 second. This value can be changed to increase or decrease speed of the game;</li>
<li><code>print_board</code> – prints the game Board on the screen for each tick of time;</li>
<li><code>draw_food_and_snake</code> – clears Board array and sets food and snake on it;</li>
<li><code>show_message</code> – draws message on our Board;</li>
<li><code>show_start_screen</code> – draws start screen;</li>
<li><code>check_if_snake_ate_itself</code> – ends game, if the Snake ate itself;</li>
<li><code>check_if_snake_met_wall</code> – updates head, if The Snake met the wall;</li>
<li><code>check_if_snake_ate_food</code> – increases Snake’s size, if the Snake eats food and re-creates food;</li>
<li><code>check_snake_position</code> – checks if snake met one of the positions above</li>
<li><code>start</code> – method, which runs our game. Launches tick and ends game, if any error appears in the game (example: <code>AteItselfError</code>);</li>
<li><code>execute_action</code> – executes an action on <code>keypress</code> by given keys;</li>
<li><code>compare_key</code> – compares the given key and receives one from <code>stdin</code>.</li>
</ul>


<h2>GETTING KEYS PRESSED</h2>

<p>You can see <code>GetKey</code> module, that I haven’t told you about. At the beginning of my development, I got into a situation that almost made me give up.
I tried <code>STDIN.read_nonblock</code>, <code>STDIN.getc</code>, <code>gets</code> and other solutions, but none of them gave me the expected result. Fortunately, I found <a href="http://stackoverflow.com/questions/946738/detect-key-press-non-blocking-w-o-getc-gets-in-ruby">this question</a>, which had a solution to my problem. Now we don’t wait until the key is pressed, but continue rendering our game with the movement of the Snake. <code>GetKey</code> module is listed under <code>lib/get_key.rb</code></p>

<h2>LET’S PLAY!</h2>

<p>Finally, you can write the last Ruby file that will start our Game – <code>start.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;lib/*.rb&#39;</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">))</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">require</span> <span class="n">file</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;lib/errors/*.rb&#39;</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">))</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">require</span> <span class="n">file</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'><span class="n">game</span> <span class="o">=</span> <span class="no">Game</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">game</span><span class="o">.</span><span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should be requiring all game files as you did in <code>spec_helper</code> and creating a new game object using <code>Game.new</code>. <code>game.start</code> that will start your game.
You should see something like this:</p>

<p><a href="https://asciinema.org/a/a71jakx5dwtp4jy2962ef3sw8"><img src="http://akovtunov.github.io/images/ruby_snake/abf5d12ac93fe44c9e8b8051fddf8ac3dd60f4d1.png"></a></p>

<h2>CONCLUSION</h2>

<p>We have created a good base for a simple Snake Game that now can be extended with different features. I’ve played a bit with code and found that it is easy to create:</p>

<ul>
<li><p>a common Snake Game with walls:
<img src="http://akovtunov.github.io/images/ruby_snake/Screenshot-from-2016-08-18-012212.png"></p></li>
<li><p>Snake Game for two players and for playing with computer opponent:
<img src="http://akovtunov.github.io/images/ruby_snake/Screenshot-from-2016-08-18-013530.png"></p></li>
<li><p>Snake Game with different ‘enemies’ that can hurt you:
<img src="http://akovtunov.github.io/images/ruby_snake/Screenshot-from-2016-08-18-012806.png"></p></li>
<li><p>and many more&hellip;</p></li>
</ul>


<p><a href="https://github.com/AKovtunov/ruby_snake">sources are here</a></p>

<h1 align="center">Enjoy the game!</h1>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native in One Day: Android Application for Tracking Your Spends With Google Maps Support]]></title>
    <link href="http://akovtunov.github.io/blog/2017/04/23/react-native-in-one-day-android-application-for-tracking-your-spends-with-google-maps-support/"/>
    <updated>2017-04-23T00:32:26+02:00</updated>
    <id>http://akovtunov.github.io/blog/2017/04/23/react-native-in-one-day-android-application-for-tracking-your-spends-with-google-maps-support</id>
    <content type="html"><![CDATA[<blockquote><p>This is a copy of my <a href="http://www.diatomenterprises.com/react-native-in-one-day-android-application-for-tracking-your-spends-with-google-maps-support/">original post for Diatom Enterprises</a></p></blockquote>

<p><img class="center" src="http://akovtunov.github.io/images/react_maps/title_image.png"></p>

<p>Usually I travel a lot by my car and make blog posts about it. And usually readers ask me about the mileage, gas consumption and other useful information. So I have decided to create a simple application, where I would be able to save all this information just in few clicks, without any registrations, advertisements and big tracking applications. I’ve never written any Android application and I wanted to take a look at the React library, so react-native was the best choice for me.</p>

<!--more-->


<h2>BASIC SETUPS</h2>

<p>I don’t want to write another guide about how to set up react-native and Android studio. All the information about the installation steps is described <a href="https://facebook.github.io/react-native/docs/getting-started.html" title="React-Native Docs">here</a>. Just don’t forget to turn on <code>KVM</code> in bios, if your system supports it.</p>

<p>Let’s create a new project with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>react-native init project_name
</span><span class='line'>react-native init gas_counter_map</span></code></pre></td></tr></table></div></figure>


<p>And <code>cd</code> into it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd gas_counter_map</span></code></pre></td></tr></table></div></figure>


<p>Now we have an empty project that we can build and test on our virtual mobile.
First, we need to run a virtual device.</p>

<p>If you haven’t copied the path to your emulator yet, you need to open an Android studio and run the virtual devise from there. As soon as you do it, you shall copy string that runs the emulator from console at the bottom of the Android-studio. Later you can use this copied command to run your device.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/home/YOUR USER NAME/Android/Sdk/tools/emulator -netdelay none -netspeed full -avd Xperia</span></code></pre></td></tr></table></div></figure>


<p>Then, if you haven’t launched React Native yet, let’s do it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>react-native start</span></code></pre></td></tr></table></div></figure>


<p>And finally, we need to build our application’s code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>react-native run-android</span></code></pre></td></tr></table></div></figure>


<p>If everything is OK, you should see an Android screen with the initial text on it.
Let’s modify our code now.</p>

<h2>CONFIGURING AND USING REACT-NATIVE-MAPS</h2>

<p>Before taking the next steps, I suggest you to initialize a git repository and commit your code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init
</span><span class='line'>git add .
</span><span class='line'>git commit -m “Initial commit”</span></code></pre></td></tr></table></div></figure>


<p>It will save your progress and later you will be able to undo your changes at any time.
I use <a href="https://github.com/lelandrichardson/react-native-maps/">react-native-maps</a> package because it has been suggested as a stable map package for android applications by react-native developers. The guide to set-up a package is here.
Let’s add a component to our view.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">MapView</span>  <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And let’s add some style to it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">MapView</span>
</span><span class='line'>  <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">map</span><span class="p">}</span>
</span><span class='line'><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in styles section of <code>index.android.js</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">map</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">150</span><span class="o">,</span>
</span><span class='line'>  <span class="n">alignSelf</span><span class="o">:</span> <span class="s1">&#39;stretch&#39;</span><span class="o">,</span>
</span><span class='line'><span class="p">}</span><span class="o">,</span>
</span></code></pre></td></tr></table></div></figure>


<h2>LET’S TRY IT!</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>react-native run-android</span></code></pre></td></tr></table></div></figure>


<p>At this step we should see a working map on our virtual device’s screen.</p>

<p><img class="center" src="http://akovtunov.github.io/images/react_maps/Screenshot_20160613-155504-576x1024.png" width="300"></p>

<p>If at this stage you see a black grey space with “Google” label, than you’ve missed some Google key configurations.
Now you may commit your changes.</p>

<h2>GETTING CURRENT USER’S LOCATION</h2>

<p>At first, we need to request a permission in <code>AndroidManifest.xml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s define our variables in <code>index.android.js</code> under a class definition.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span><span class='line'>   <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">initialCoords</span><span class="o">:</span> <span class="s1">&#39;unknown&#39;</span><span class="p">,</span> <span class="c1">//&lt;- Our coords</span>
</span><span class='line'>     <span class="nx">gotGpsData</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>counstructor()</code> initializes the state with our given variables and their values.
For our GPS data we need to use a <code>navigator.getCurrentPosition</code> and <code>navigator.watchCurrentPosition</code> methods</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">getGpsData</span><span class="p">(){</span>
</span><span class='line'>   <span class="nx">navigator</span><span class="p">.</span><span class="nx">geolocation</span><span class="p">.</span><span class="nx">getCurrentPosition</span><span class="p">(</span>
</span><span class='line'>     <span class="p">(</span><span class="nx">position</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">initialCoords</span><span class="o">:</span> <span class="nx">position</span><span class="p">.</span><span class="nx">coords</span><span class="p">});</span>
</span><span class='line'>       <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">gotGpsData</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">alert</span><span class="p">(</span><span class="nx">error</span><span class="p">),</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">enableHighAccuracy</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">timeout</span><span class="o">:</span> <span class="mi">20000</span><span class="p">,</span> <span class="nx">maximumAge</span><span class="o">:</span> <span class="mi">1000</span><span class="p">}</span>
</span><span class='line'>   <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="nx">navigator</span><span class="p">.</span><span class="nx">geolocation</span><span class="p">.</span><span class="nx">watchPosition</span><span class="p">(</span>
</span><span class='line'>     <span class="p">(</span><span class="nx">position</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>       <span class="kd">var</span> <span class="nx">lastPosition</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">position</span><span class="p">);</span>
</span><span class='line'>       <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">initialCoords</span><span class="o">:</span> <span class="nx">position</span><span class="p">.</span><span class="nx">coords</span><span class="p">});</span>
</span><span class='line'>       <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">gotGpsData</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>
</span><span class='line'>       <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{}</span>
</span><span class='line'>   <span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, we are getting our user’s location, and then we are creating watcher for the changes of his location. If a user has changed his location, we are rendering view again with an updated map. If there were no errors, we are setting our <code>gotGpsData</code> boolean to true.
Let’s update our <code>render()</code> action with the new opportunities!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">gotGpsData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">this</span><span class="p">.</span><span class="nx">getGpsData</span><span class="p">();</span>
</span><span class='line'>     <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">renderLoadingView</span><span class="p">();</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>     <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="o">&lt;</span><span class="nx">MapView</span>
</span><span class='line'>         <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">map</span><span class="p">}</span>
</span><span class='line'>         <span class="nx">region</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span>
</span><span class='line'>           <span class="nx">longitude</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">initialCoords</span><span class="p">.</span><span class="nx">longitude</span><span class="p">,</span>
</span><span class='line'>           <span class="nx">latitude</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">initialCoords</span><span class="p">.</span><span class="nx">latitude</span><span class="p">,</span>
</span><span class='line'>           <span class="nx">latitudeDelta</span><span class="o">:</span> <span class="mf">0.5</span><span class="p">,</span>
</span><span class='line'>           <span class="nx">longitudeDelta</span><span class="o">:</span> <span class="mf">0.5</span><span class="p">,</span>
</span><span class='line'>         <span class="p">}}</span>
</span><span class='line'>       <span class="o">/&gt;</span>
</span><span class='line'>       <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">instructions</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>         <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">initialCoords</span><span class="p">.</span><span class="nx">latitude</span><span class="p">}</span>
</span><span class='line'>       <span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>     <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class='line'>   <span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What are we doing in this part of the code?</p>

<p>If the user hasn’t given an access to his GPS coords or coords are not yet received, we are trying to get them again and calling <code>renderLoadingView</code>. We will talk about it later.
If we have got user’s coordinates, we are creating a map widget with user’s location.
Under the map we will see user’s <code>initialLatitude</code>, so we will be able to check our watchers and other code.
<code>latitudeDelta</code> (the vertical distance represented by the region), and <code>longitudeDelta</code> (the horizontal distance represented by the region) can be set at 0.001 or as per your need. The larger number is – the bigger view distance from the place.
What about <code>renderLoadingView</code>?
Let’s update our boring view a bit and add <code>ProgressBarAndroid</code> to the <code>import{}</code> section.
Now we can write a nice “loader” that the user will see until we receive any coordinates.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">renderLoadingView</span><span class="p">(){</span>
</span><span class='line'>   <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>     <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="o">&lt;</span><span class="nx">ProgressBarAndroid</span> <span class="o">/&gt;</span>
</span><span class='line'>       <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">instructions</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>         <span class="nx">Receiving</span> <span class="nx">GPS</span> <span class="nx">information</span><span class="p">...</span>
</span><span class='line'>       <span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>     <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class='line'>   <span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://akovtunov.github.io/images/react_maps/Screenshot_20160609-151657-576x1024.png" width="300"></p>

<p>Now you may want to commit your changes.</p>

<h2>INPUTS FOR PRICES AND MILEAGE</h2>

<p>So, we are writing an application about prices, mileage and gas consumption, right? Then we need inputs for these data.
At first we need to add a <code>TextInput</code> component to the <code>import{}</code> section of our application.
To create a basic input we can use a code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">TextInput</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span><span class="nx">height</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span> <span class="nx">borderColor</span><span class="o">:</span> <span class="s1">&#39;gray&#39;</span><span class="p">,</span> <span class="nx">borderWidth</span><span class="o">:</span> <span class="mi">1</span><span class="p">}}</span>  <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But how will we assign this data to a variable?
Let’s add some new variables to our constructor</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span><span class='line'>   <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">initialCoords</span><span class="o">:</span> <span class="s1">&#39;unknown&#39;</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">gotGpsData</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">spentMoney</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">// &lt;- NEW</span>
</span><span class='line'>     <span class="nx">filledLiters</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="c1">// &lt;- NEW</span>
</span><span class='line'>     <span class="nx">droveMileage</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">// &lt;- NEW</span>
</span><span class='line'>     <span class="nx">gotCoords</span><span class="o">:</span> <span class="s1">&#39;unknown&#39;</span><span class="p">,</span>
</span><span class='line'>   <span class="p">};</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And a callback on the input field change.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">TextInput</span>
</span><span class='line'>  <span class="nx">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span><span class="nx">height</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span> <span class="nx">borderColor</span><span class="o">:</span> <span class="s1">&#39;gray&#39;</span><span class="p">,</span> <span class="nx">borderWidth</span><span class="o">:</span> <span class="mi">1</span><span class="p">}}</span>
</span><span class='line'>  <span class="nx">onChangeText</span><span class="o">=</span><span class="p">{(</span><span class="nx">spentMoney</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">spentMoney</span><span class="p">})}</span>
</span><span class='line'>  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span>
</span><span class='line'><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>At each change of the input, we will update our local variable and use it in our input. Good? Not yet!</p>

<p><img class="center" src="http://akovtunov.github.io/images/react_maps/Screenshot_20160701-1636212-576x1024.png" width="300"></p>

<p>All our data are digital. For a better UI we can update our inputs, so that they show a numeric keyboard on each click by setting a <code>keyboardType</code> property:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">TextInput</span>
</span><span class='line'>  <span class="nx">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span><span class="nx">height</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span> <span class="nx">borderColor</span><span class="o">:</span> <span class="s1">&#39;gray&#39;</span><span class="p">,</span> <span class="nx">borderWidth</span><span class="o">:</span> <span class="mi">1</span><span class="p">}}</span>
</span><span class='line'>  <span class="nx">onChangeText</span><span class="o">=</span><span class="p">{(</span><span class="nx">spentMoney</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">spentMoney</span><span class="p">})}</span>
</span><span class='line'>  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">keyboardType</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;numeric&#39;</span><span class="p">}</span>
</span><span class='line'><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s update our view with other inputs and captions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">gotGpsData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">getGpsData</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">renderLoadingView</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">MapView</span>
</span><span class='line'>          <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">map</span><span class="p">}</span>
</span><span class='line'>          <span class="nx">region</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">longitude</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">initialCoords</span><span class="p">.</span><span class="nx">longitude</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">latitude</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">initialCoords</span><span class="p">.</span><span class="nx">latitude</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">latitudeDelta</span><span class="o">:</span> <span class="mf">0.01</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">longitudeDelta</span><span class="o">:</span> <span class="mf">0.01</span><span class="p">,</span>
</span><span class='line'>          <span class="p">}}</span>
</span><span class='line'>        <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">instructions</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">Spent</span> <span class="nx">money</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">TextInput</span>
</span><span class='line'>          <span class="nx">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span><span class="nx">height</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span> <span class="nx">borderColor</span><span class="o">:</span> <span class="s1">&#39;gray&#39;</span><span class="p">,</span> <span class="nx">borderWidth</span><span class="o">:</span> <span class="mi">1</span><span class="p">}}</span>
</span><span class='line'>          <span class="nx">onChangeText</span><span class="o">=</span><span class="p">{(</span><span class="nx">spentMoney</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">spentMoney</span><span class="p">})}</span>
</span><span class='line'>          <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span>
</span><span class='line'>          <span class="nx">keyboardType</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;numeric&#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">instructions</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">Filled</span><span class="o">-</span><span class="k">in</span> <span class="nx">liters</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">TextInput</span>
</span><span class='line'>          <span class="nx">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span><span class="nx">height</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span> <span class="nx">borderColor</span><span class="o">:</span> <span class="s1">&#39;gray&#39;</span><span class="p">,</span> <span class="nx">borderWidth</span><span class="o">:</span> <span class="mi">1</span><span class="p">}}</span>
</span><span class='line'>          <span class="nx">onChangeText</span><span class="o">=</span><span class="p">{(</span><span class="nx">filledLiters</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">filledLiters</span><span class="p">})}</span>
</span><span class='line'>          <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span>
</span><span class='line'>          <span class="nx">keyboardType</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;numeric&#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">instructions</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">Mileage</span> <span class="nx">from</span> <span class="nx">the</span> <span class="nx">last</span> <span class="nx">point</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">TextInput</span>
</span><span class='line'>          <span class="nx">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span><span class="nx">height</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span> <span class="nx">borderColor</span><span class="o">:</span> <span class="s1">&#39;gray&#39;</span><span class="p">,</span> <span class="nx">borderWidth</span><span class="o">:</span> <span class="mi">1</span><span class="p">}}</span>
</span><span class='line'>          <span class="nx">onChangeText</span><span class="o">=</span><span class="p">{(</span><span class="nx">droveMileage</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">droveMileage</span><span class="p">})}</span>
</span><span class='line'>          <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span>
</span><span class='line'>          <span class="nx">keyboardType</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;numeric&#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">instructions</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">initialCoords</span><span class="p">.</span><span class="nx">latitude</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://akovtunov.github.io/images/react_maps/Screenshot_20160701-163623-1-576x1024.png" width="300"></p>

<p>Now we can modify our map.
You may want to commit your changes and test them, so we can proceed to the next step.</p>

<h2>ADDING PRICE MARKERS</h2>

<p>Google Maps have a great tool called “markers” to point out location. I suggest to use this tool to point out current user’s place. <code>react-native-maps</code> have a “price marker” with which we will show our user how much he has spent and where.
First, we need to download a <code>PriceMarker</code> sample in our project’s folder, so that we could use it in our map.</p>

<p><a href="https://github.com/DiatomEnterprises/react-native-maps/blob/master/example/examples/PriceMarker.js">https://github.com/DiatomEnterprises/react-native-maps/blob/master/example/examples/PriceMarker.js</a></p>

<p>Next – we need to add it in our main project</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">PriceMarker</span> <span class="nx">from</span> <span class="s1">&#39;./PriceMarker&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we can add this marker to our map and show the value of Spent Money variable. In order to do this you need to put this code inside <code>&lt;MapView style=”…”..&gt;</code> </MapView> tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">MapView</span> <span class="nx">style</span><span class="o">=</span><span class="err">”</span><span class="p">...</span><span class="err">”</span><span class="p">...</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="o">&lt;</span><span class="nx">MapView</span><span class="p">.</span><span class="nx">Marker</span>
</span><span class='line'>      <span class="nx">coordinate</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">initialCoords</span><span class="p">}</span>
</span><span class='line'>      <span class="nx">draggable</span>
</span><span class='line'>   <span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">PriceMarker</span> <span class="nx">amount</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">spentMoney</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>   <span class="o">&lt;</span><span class="err">/MapView.Marker&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/MapView&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After building your project you should see something like this:
<img class="center" src="http://akovtunov.github.io/images/react_maps/Screenshot_20160701-163403-576x1024.png" width="300"></p>

<p>Now we are ready to save our data.
You may want to commit your changes and test them, so we can go to the next step.</p>

<h2>SAVING CURRENT DATA</h2>

<p>To save our current data, we will use <code>AsyncStorage</code>. It’s a simple, asynchronous, persistent, key-value storage system that is global to the app.
At first we need to add <code>AsycStorage</code> to the import section</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'> <span class="nx">AsyncStorage</span><span class="p">,</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next – let’s update our state. We need a variable that will save records count from the database to work with IDs. Also, we need a <code>lastRecords</code> variable that will contain our previous records. And finally, we need a method that will synchronize our storage with the application on startup.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="nx">recordCount</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lastRecords</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">syncStorage</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>syncStorage()</code> method will be called on startup and will synchronize the current records and their count with the state.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">syncStorage</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">AsyncStorage</span><span class="p">.</span><span class="nx">getAllKeys</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">keys</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">AsyncStorage</span><span class="p">.</span><span class="nx">multiGet</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">stores</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">recordCount</span><span class="o">:</span> <span class="nx">stores</span><span class="p">.</span><span class="nx">length</span><span class="p">});</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">lastRecords</span><span class="o">:</span> <span class="nx">stores</span><span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this part of code, at first, we are getting all of the keys that <code>AsyncStorage</code> contains.
Then, we are getting all records by these keys.
Next, we need to create a method to save our data in a storage</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">saveData</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">saveData</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;longitude&quot;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">initialCoords</span><span class="p">.</span><span class="nx">longitude</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;latitude&quot;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">initialCoords</span><span class="p">.</span><span class="nx">latitude</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;spentMoney&quot;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">spentMoney</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;filledLiters&quot;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">filledLiters</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;droveMileage&quot;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">filledLiters</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;timestamp&quot;</span><span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">),</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">AsyncStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s2">&quot;record_&quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">record_count</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">saveData</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Saved record #&quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">record_count</span><span class="o">+</span><span class="mi">1</span><span class="p">})</span>
</span><span class='line'>  <span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sync_storage</span><span class="p">()).</span><span class="nx">done</span><span class="p">(</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">()</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>AsyncStorage.setItem()</code> Sets value for key and calls callback on completion
I’ve added a <code>timestamp</code> in milliseconds, thus, we can get an information about when we have done this record.
Now, let’s update our views:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">MapView</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">MapView</span><span class="p">.</span><span class="nx">Marker</span> <span class="p">...</span>    <span class="o">&gt;</span> <span class="p">...</span>  <span class="o">&lt;</span><span class="err">/MapView.Marker&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">lastRecords</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">item</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">item</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>        <span class="nx">coords</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">latitude</span><span class="o">:</span> <span class="nx">item</span><span class="p">.</span><span class="nx">latitude</span><span class="p">,</span> <span class="nx">longitude</span><span class="o">:</span> <span class="nx">item</span><span class="p">.</span><span class="nx">longitude</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">MapView</span><span class="p">.</span><span class="nx">Marker</span>
</span><span class='line'>            <span class="nx">coordinate</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">coords</span> <span class="p">}</span>
</span><span class='line'>            <span class="nx">draggable</span>
</span><span class='line'>          <span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">PriceMarker</span> <span class="nx">amount</span><span class="o">=</span><span class="p">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">spentMoney</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/MapView.Marker&gt;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>      <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/MapView&gt;</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">TouchableHighlight</span>
</span><span class='line'>   <span class="nx">activeOpacity</span><span class="o">=</span><span class="p">{</span><span class="mf">0.6</span><span class="p">}</span>
</span><span class='line'>   <span class="nx">underlayColor</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;white&#39;</span><span class="p">}</span>
</span><span class='line'>   <span class="nx">onPress</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">saveData</span><span class="p">()}</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">button</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Save</span><span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/TouchableHighlight&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">instructions</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">instructions</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="nx">Your</span> <span class="nx">fuel</span> <span class="nx">consumption</span> <span class="nx">on</span> <span class="k">this</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">droveMileage</span><span class="p">}</span> <span class="nx">km</span> <span class="nx">is</span> <span class="p">{</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">filledLiters</span> <span class="o">*</span> <span class="mi">100</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">droveMileage</span> <span class="o">*</span><span class="mi">100</span><span class="p">)</span><span class="o">/</span><span class="mi">100</span><span class="p">}</span> <span class="nx">l</span><span class="o">/</span><span class="mi">100</span><span class="nx">km</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/Text&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/View&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have added a cycle for generating markers inside the <code>&lt;MapView&gt;</code> tag. This part of code maps all previous records and creates markers on map from them.
<code>&lt;TouchableHighlight&gt;</code>  is a wrapper for making views respond properly to touch.  The main part is <code>onPress</code> event that calls <code>this.saveData()</code> method.
<code>this.state.message</code> returns a message about successful save.
Finally, we calculate fuel consumption basing on the mileage driven. We assume that the previous time user filled up his car and check how much fuel he has spent until now. Then we take the driven mileage and calculate his fuel consumption.
I think that my drive to Riga could look like this:</p>

<p><img class="center" src="http://akovtunov.github.io/images/react_maps/Screenshot_20160701-163737-576x1024.png" width="300">
<img class="center" src="http://akovtunov.github.io/images/react_maps/Screenshot_20160701-163833-576x1024.png" width="300">
<img class="center" src="http://akovtunov.github.io/images/react_maps/Screenshot_20160701-164036-576x1024.png" width="300"></p>

<p>That’s it! Finally, don’t forget to commit your changes.
You can manipulate with the saved data in any way: calculate all user’s expenses, mileage driven, average fuel consumption or create a swarm-like application.
Link to the GitHub <a href="https://github.com/AKovtunov/gas_counter_map">source</a>
Just for case if you are not sure what is difference between <a href="http://www.diatomenterprises.com/technologies/reactjs-specifics/">ReactJS</a> and React Native.
React Native is a mobile framework that compiles to native app components.
It allows you to build native mobile applications (iOS, Android, and Windows) in JavaScript.
<a href="http://www.diatomenterprises.com/technologies/reactjs-specifics/">ReactJS</a> is full JS library which is easy to use on your web.
Both are open sourced by Facebook.</p>
]]></content>
  </entry>
  
</feed>
