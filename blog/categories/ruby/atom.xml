<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby, | Knowledge Gathering]]></title>
  <link href="http://akovtunov.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://akovtunov.github.io/"/>
  <updated>2017-10-31T02:23:44+01:00</updated>
  <id>http://akovtunov.github.io/</id>
  <author>
    <name><![CDATA[Alexandr Kovtunov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Teaching RSpec How to Speak]]></title>
    <link href="http://akovtunov.github.io/blog/2017/11/01/teaching-rspec-to-speak/"/>
    <updated>2017-11-01T01:16:53+01:00</updated>
    <id>http://akovtunov.github.io/blog/2017/11/01/teaching-rspec-to-speak</id>
    <content type="html"><![CDATA[<p>As a Ruby on Rails developer, I&rsquo;m writing RSpec tests a lot and for big applications it takes a lot of time to run them all.
On my current project tests take close to half an hour to run, so I&rsquo;m getting disturbed by another tasks, funny Facebook memes or interesting YouTube videos. As a result, my running tests are being forgotten. I&rsquo;ve spent some time to find a good solution to remind me about them, and I found it.</p>

<!--more-->


<h2>TTS - Text to Speech. (Time to Speak :P )</h2>

<p>I was wondering if I can use the Google Translate voice to tell me when my tests are done and I found a way to do it.
We just need a <a href="https://github.com/c2h2/tts">tts</a> gem and some magic around.</p>

<p>At first, let&rsquo;s install the tts gem by adding it to the <code>Gemfile</code></p>

<pre><code class="ruby">gem 'tts'
</code></pre>

<p>or just by running <code>gem install tts</code>.</p>

<p>Then we need to modify our <code>spec/spec_helper.rb</code> and add a few lines:</p>

<pre><code class="ruby">require 'tts'
config.after(:suite) do
  "Rspec completed testing the application.".play
end
</code></pre>

<p>So, after the whole bunch of tests (<code>config.after(:suite)</code>) the code will run tts method <code>play</code>, that will tell us that tests were completed.</p>

<p>But what if I want to hear more detailed results? We can get current results from RSpec&rsquo;s reporter variable and count successful results.</p>

<pre><code class="ruby">reporter = RSpec.world.reporter
examples_count = reporter.examples.count
failed_examples_count = reporter.failed_examples.count
successful_examples_count = examples_count - failed_examples_count
</code></pre>

<p>Now we can combine everything and listen how RSpec tells us the statistics after each run</p>

<pre><code class="ruby">config.after(:suite) do
  reporter = RSpec.world.reporter
  examples_count = reporter.examples.count
  failed_examples_count = reporter.failed_examples.count
  successful_examples_count = examples_count - failed_examples_count
  "Rspec completed testing the application. Total count is #{examples_count}. Successful - #{successful_examples_count}. Failed - #{failed_examples_count}".play
end
</code></pre>

<p>What if we don&rsquo;t want to hear this annoying text all the time when we are running single test or sitting in the silent office? What if we don&rsquo;t want to scare our roommates?</p>

<p>I found that we can&rsquo;t easily pass the options to the <code>rspec</code> command, BUT we can use environment variables to set some parameters.</p>

<p>Let&rsquo;s agree that we will use <code>RSPEC_TTS_ENABLED</code> environment variable defining if we want to hear our command or not. Then we can enable the tts only if it will receive the variable.</p>

<pre><code class="ruby">if ENV['RSPEC_TTS_ENABLED']
  config.after(:suite) do
    reporter = RSpec.world.reporter
    examples_count = reporter.examples.count
    failed_examples_count = reporter.failed_examples.count
    successful_examples_count = examples_count - failed_examples_count
    "Rspec completed testing the application. Total count is #{examples_count}. Successful - #{successful_examples_count}. Failed - #{failed_examples_count}".play
  end
end
</code></pre>

<p>Thats it! A bit of code and we have a reminder about completed tests :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different Sides of Ruby Development: OpenGL]]></title>
    <link href="http://akovtunov.github.io/blog/2017/04/24/different-sides-of-ruby-development-opengl/"/>
    <updated>2017-04-24T12:03:59+02:00</updated>
    <id>http://akovtunov.github.io/blog/2017/04/24/different-sides-of-ruby-development-opengl</id>
    <content type="html"><![CDATA[<blockquote><p>This is a copy of my <a href="http://www.diatomenterprises.com/different-sides-of-ruby-development-opengl/">original post for Diatom Enterprises</a></p></blockquote>

<p>When I’m trying to take a break from web development, I like to build something new and uncommon in Ruby programming. Ruby is typically known for web services, APIs and other web-related development. But with some time, you can build many other types of software.
Different sides of Ruby development: OpenGL</p>

<p><img src="/images/ruby_opengl/blan_eeeeee1.jpg"></p>

<p>After creating , I started researching Ruby applications that use 3D graphics. I found a nice library, <a href="https://github.com/larskanis/opengl">OpenGL for Ruby</a>, and created a few samples with it. At first, it can be difficult to understand everything, but let’s see what can we do!</p>

<!--more-->


<p>To start working with <code>OpenGL</code> for Ruby, we only need two gems:
<code>Gemfile.rb</code>:</p>

<pre><code class="ruby">source "https://rubygems.org"
gem "gosu"
gem "opengl"
</code></pre>

<p>I chose <a href="https://github.com/tianon/gosu">gosu</a> because it provides good functionality to work with windows, players and partial rendering of window objects.</p>

<h2>LET’S CREATE SOMETHING SIMPLE!</h2>

<p>Sometimes it’s hard to imagine how everything should look in 3D, so for the first step, I chose to draw an axis instead of a simple cube.
This is a good way to see how our coordinates lie on the three-dimensional grid. Also, we will set the color of the lines to define where the <code>x</code>, <code>y</code> and <code>z</code> coordinates are.
I suggest that you separate objects into different classes that will stay under the <code>objects/</code> directory. So <code>media/axis.rb</code> will contain:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Axis</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:x_width</span><span class="p">,</span> <span class="ss">:y_width</span><span class="p">,</span> <span class="ss">:z_width</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def initialize(x_width, y_width, z_width)</span>
</span><span class='line'><span class="sr">    @x_width = x_width</span>
</span><span class='line'><span class="sr">    @y_width = y_width</span>
</span><span class='line'><span class="sr">    @z_width = z_width</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">draw</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span> <span class="o">=</span> <span class="kp">new</span><span class="p">(</span><span class="n">x_width</span><span class="p">,</span> <span class="n">y_width</span><span class="p">,</span> <span class="n">z_width</span><span class="p">)</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">draw</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def draw</span>
</span><span class='line'><span class="sr">    glBegin(GL_LINES)</span>
</span><span class='line'><span class="sr">      glColor3d(1, 0, 0)</span>
</span><span class='line'><span class="sr">      glVertex3d(0, 0, 0)</span>
</span><span class='line'><span class="sr">      glVertex3d(x_width, 0, 0)</span>
</span><span class='line'><span class="sr">      glColor3d(0, 1, 0)</span>
</span><span class='line'><span class="sr">      glVertex3d(0, 0, 0)</span>
</span><span class='line'><span class="sr">      glVertex3d(0, y_width, 0)</span>
</span><span class='line'><span class="sr">      glColor3d(0, 0, 1)</span>
</span><span class='line'><span class="sr">      glVertex3d(0, 0, 0)</span>
</span><span class='line'><span class="sr">      glVertex3d(0, 0, z_width)</span>
</span><span class='line'><span class="sr">    glEnd</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>All the OpenGL magic happens in the draw action. <code>glBegin</code> and <code>glEnd</code> works like a ruby block where in argument you need to send the type of object that you want to draw in the argument. You can find all the types in the <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glBegin.xml">official documentation</a>.
Inside this block you set the lines and their color. This sets the color for all the lines that you will draw after method <code>glColor3d</code>. There are lots of different implementations of the <code>glColor</code> method that differ only by the type of argument.<code>glColor3d</code> takes arguments in <code>GLdouble</code>, <code>glColor3f</code>, <code>GLfloat</code>, etc. <code>glColor3d</code> takes three arguments – red, green and blue values. <code>glColor4*</code> can also take an alpha value.
To draw a line, you need to set two points, and OpenGL will draw a line between them. To do this, you need to call <code>glVertex</code>. You can pass two to four arguments of different types, depending on the method you are trying to call. In our case, we are sending the <code>x</code>, <code>y</code> and <code>z</code> coordinates of our future points. You can set as many lines in your <code>glBegin…glEnd</code> block as you wish. In my example, I’m drawing lines from the beginning of the axis (x = 0, y = 0, z = 0) to (x = <code>x_width</code>, y = <code>y_width</code>, z = <code>z_width</code>) in pixels.</p>

<pre><code class="ruby">require 'opengl'
require 'glu'
require 'gosu'
Dir["objects/*"].each {|file| require_relative file }
include Gl, Glu

class Window &lt; Gosu::Window

  def initialize
    super 800, 600
    self.caption = "Diatom's OpenGL Tutorial"
  end

  def update
  end

  def draw
    gl do
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
      Axis.draw(100, 100, 100)
    end
  end

  def button_down(id)
    exit if id == Gosu::KbEscape
  end
end

Window.new.show
</code></pre>

<p><code>glClear</code> clears buffers to preset values. After that we call <code>Axis.draw</code> to draw our axis.</p>

<p><img src="/images/ruby_opengl/diatom_opengl-4.jpg"></p>

<p>As you can see, we can’t find an <code>y</code> axis because there is a frame border in its place. So if you want, you can set start of the line from <code>(x = 1)</code> instead of <code>(x = 0)</code>.</p>

<p><img src="/images/ruby_opengl/diatom_opengl-5.jpg"></p>

<p>Here we see a problem: what if we want to draw a set different objects, but not from the top left corner? What if we want to move the center of the axes?</p>

<h2>MOVING THE CENTER OF THE AXES</h2>

<p>To move the center of the axes, we can use the <code>glTranslate</code> method. It multiplies the current matrix by a translation matrix and produces a translation by x, y, z. All the objects after the <code>glTranslate</code> method will be drawn depending on those coordinates. To work with both translated and normal coordinates, we need to use the <code>glPushMatrix</code> and <code>glPopMatrix</code> methods, which will save the previous matrix and restore it. <code>glTranslate</code> produces different methods – <code>glTranslated(x, y, z)</code>, <code>glTranslatef(x, y, z)</code> etc. – where <code>x</code>, <code>y</code> and <code>z</code> are the coordinates of a translation vector.
Let’s update our code using this method.</p>

<pre><code class="ruby">def draw
 gl do
   glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
   glPushMatrix
     glTranslated(width/2, height/2, 0)
     Axis.draw(100, 100, 100)
   glPopMatrix
 end
end
</code></pre>

<p><img src="/images/ruby_opengl/diatom_opengl-6.jpg"></p>

<p>As we can now see, our axis moved to the center of our screen. To see the difference and how <code>glPushMatrix</code> and <code>glPopMatrix</code> work, let’s add the previous axis too.</p>

<pre><code class="ruby">def draw
  gl do
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

    glPushMatrix
      glTranslated(width/2, height/2, 0)
      Axis.draw(100, 100, 100)
    glPopMatrix

    glEnable(GL_LINE_STIPPLE)
    glLineStipple(2,0x00FF)

    Axis.draw(100, 100, 100)
    glDisable(GL_LINE_STIPPLE)
  end
end
</code></pre>

<p><img src="/images/ruby_opengl/diatom_opengl-3.jpg"></p>

<p>As you can see, the previous axis was drawn on the (0, 0, 0) coordinates with the stippled lines without any change to <code>axis.rb</code> or its coordinates.
It seems like we forgot about the z coordinate that we can’t see on our flat screen. To take a look at it, we need to use a viewpoint.</p>

<h2>GETTING INTO THE REAL 3D WORLD</h2>

<p>At first, I suggest that you build another object on our scene – a cube. It will help us to see the difference between the angles of our viewpoint.
To draw it, we can use <code>GL_QUADS</code>. Each of the four points defines a Quad, so to make a cube we need six Quads = 24 points.
<code>objects/cube.rb</code>:</p>

<pre><code class="ruby">require 'pry'
class Cube
  attr_reader :x_width, :y_width, :z_width, :mode, :mode_face

  def initialize(x_width, y_width, z_width, mode_face, mode)
    @x_width = x_width
    @y_width = y_width
    @z_width = z_width
    @mode = mode
    @mode_face = mode_face
  end

  def self.draw(x_width, y_width, z_width, mode_face = GL_FRONT_AND_BACK, mode = GL_FILL)
    object = new(x_width, y_width, z_width, mode_face, mode)
    object.draw
  end

  def draw
    glPolygonMode(mode_face, mode);
    glBegin(GL_QUADS)
      #yx
      glColor3d(1, 0, 0)
      glVertex3d(0, 0, 0)
      glVertex3d(x_width, 0, 0)
      glVertex3d(x_width, y_width, 0)
      glVertex3d(0, y_width, 0)
      #yz
      glColor3d(0, 1, 0)
      glVertex3d(0, y_width, 0)
      glVertex3d(0, 0, 0)
      glVertex3d(0, 0, z_width)
      glVertex3d(0, y_width, z_width)
      #zx
      glColor3d(0, 0, 1)
      glVertex3d(0, 0, z_width)
      glVertex3d(0, 0, 0)
      glVertex3d(x_width, 0, 0)
      glVertex3d(x_width, 0, z_width)
      #z -&gt; yx
      glColor3d(1, 0, 0)
      glVertex3d(0, 0, z_width)
      glVertex3d(x_width, 0, z_width)
      glVertex3d(x_width, y_width, z_width)
      glVertex3d(0, y_width, z_width)
      #x -&gt; yz
      glColor3d(0, 1, 0)
      glVertex3d(x_width, y_width, 0)
      glVertex3d(x_width, 0, 0)
      glVertex3d(x_width, 0, z_width)
      glVertex3d(x_width, y_width, z_width)
      #y -&gt; zx
      glColor3d(0, 0, 1)
      glVertex3d(0, y_width, z_width)
      glVertex3d(0, y_width, 0)
      glVertex3d(x_width, y_width, 0)
      glVertex3d(x_width, y_width, z_width)
    glEnd
  end
end
</code></pre>

<p>I’ve added two new variables – arguments for <code>glPolygonMode</code> that set a <code>rasterization</code> mode. The arguments are face (front, back) and mode (<code>GL_POINT</code>, <code>GL_LINE</code>, <code>GL_FILL</code>).
Let’s also update our axes and move code that defines their line types inside.</p>

<p><code>objects/axis.rb</code>:</p>

<pre><code class="ruby">class Axis
  attr_reader :x_width, :y_width, :z_width, :stipple

  def initialize(x_width, y_width, z_width, stipple = false)
    @x_width = x_width
    @y_width = y_width
    @z_width = z_width
    @stipple = stipple
  end

  def self.draw(x_width, y_width, z_width, stipple = false)
    object = new(x_width, y_width, z_width, stipple)
    object.draw
  end

  def draw
    if stipple
      glEnable(GL_LINE_STIPPLE)
      glLineStipple(2,0x00FF)
    end
    glBegin(GL_LINES)
      ...
    glEnd
    glDisable(GL_LINE_STIPPLE) if stipple
  end
end
</code></pre>

<p>Let’s update our code to use our new cubes.</p>

<pre><code class="ruby">def draw
  gl do
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

    glPushMatrix
      glTranslated(width/2, height/2, 0)
      Axis.draw(100, 100, 100)
      Cube.draw(50, 50, 50, GL_FRONT_AND_BACK, GL_LINE)
    glPopMatrix

    Cube.draw(50, 50, 50, GL_FRONT_AND_BACK, GL_LINE)

    Axis.draw(100, 100, 100, true)
  end
end
</code></pre>

<p><img src="/images/ruby_opengl/diatom_opengl-9.jpg"></p>

<p>Looks clear, doesn’t it?
To add perspective, we need to use the <code>gluPerspective</code> method, which is used to set up a perspective projection. It’s done once to set up how the scene will be rendered. If <code>gluPerspective</code> is used, the perspective correction will happen while rendering. The arguments are angle of view, aspect ratio, z-near and z-far.</p>

<p><img src="/images/ruby_opengl/Untitled-drawing-1.jpg"></p>

<p>So, let’s add perspective to our application.</p>

<pre><code class="ruby">def draw
  gl do
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    gluPerspective(130, width.to_f/height, 0, 500)
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()

    glPushMatrix
      glTranslated(width/2, height/2, 0)
      Axis.draw(100, 100, 100)
      Cube.draw(50, 50, 50, GL_FRONT_AND_BACK, GL_LINE)
    glPopMatrix

    Cube.draw(50, 50, 50, GL_FRONT_AND_BACK, GL_LINE)

    Axis.draw(100, 100, 100, true)
  end
end
</code></pre>

<p><img src="/images/ruby_opengl/diatom_opengl-10.jpg"></p>

<p>We can see that our field of view has been updated, and we can see only part of our (0, 0, 0) cube and axis. To see what <code>gluPerspective</code> really changes, let’s add a viewpoint.</p>

<p>To turn the player, OpenGL developers usually build a matrix of the view, load it and use later to turn the entire scene around the player. To simplify our code, we will create a ‘camera’ object that will help us look at the whole scene. To do this, we will use <code>gluLookAt</code>.</p>

<p><img src="/images/ruby_opengl/Untitled-123.jpg"></p>

<p>If we don’t set <code>gluLookAt</code>, OpenGL will automatically set it to (x = 0, y = 0, z = 0). Looking at our screen, that will be equal to <code>gluLookAt(0, 0, 1, 0, 0, 0, 0, 1, 0)</code>. So, let’s set our <code>gluLookAt</code> properly, so we can see our scene.</p>

<pre><code class="ruby">glMatrixMode(GL_MODELVIEW)
glLoadIdentity()
gluLookAt(400, 400, 400, 0, 0, 0, 0, 1, 0)
</code></pre>

<p><code>gluLookAt</code> sets our camera to point (x = 400, y = 400, z = 400) and looks at point (x = 0, y = 0, z = 0), three other coordinates of <code>up</code> vector that we will not touch for now.</p>

<p><img src="/images/ruby_opengl/diatom_opengl-12.jpg"></p>

<p>Let’s play with gluPerspective a bit now.
<code>gluPerspective(130, width.to_f/height, 0.001, 225)</code></p>

<p><img src="/images/ruby_opengl/diatom_opengl-21_2.jpg">
<img src="/images/ruby_opengl/diatom_opengl-23_2.jpg">
<img src="/images/ruby_opengl/diatom_opengl-24_2.jpg"></p>

<p>What if we want to move the camera and see the other sides of our scene? Here <code>gosu</code> helps with its built-in I\O mechanisms.</p>

<h2>MOVING THE CAMERA</h2>

<p>As you noticed, we can change all of the arguments of the <code>gluLookAt</code> method. To move our camera, we need to bind those changes to the keyboard.
I will not explain the difficult math behind the matrixes and real turning of cameras as it was made in games\applications through formulas of radiuses and angles. I want to move our camera only through axes. I know that it’s not the best solution, but it’s the easiest for understanding.
Let’s move our <code>gluLookAt</code> method inside the new camera object that will be in <code>objects/camera.rb</code></p>

<pre><code class="ruby">class Camera
  attr_reader :camera_position, :look_at_object_position, :window, :speed

  def initialize(window)
    @window = window
    @camera_position = Vector3.new(400, 400, 400)
    @look_at_object_position = Vector3.new(0, 0, 0)
    @speed = 10
  end

  def capture
    font = Gosu::Font.new(window, Gosu::default_font_name, 20)
    button_down
    font.draw("Camera position: #{camera_position.x}:#{camera_position.y}:#{camera_position.z}", 10, 10, 3.0, 1.0, 1.0, 0xffffffff)
    font.draw("Look at position: #{look_at_object_position.x}:#{look_at_object_position.y}:#{look_at_object_position.z}", 10, 25, 3.0, 1.0, 1.0, 0xffffffff)
    font.draw("Your speed: #{speed}", 10, 40, 3.0, 1.0, 1.0, 0xffffffff)
    gluLookAt(camera_position.x, camera_position.y, camera_position.z, look_at_object_position.x, look_at_object_position.y, look_at_object_position.z, 0, 1, 0)
  end

  def button_down
    @camera_position.x += speed if Gosu::button_down?(Gosu::KbRight) &amp;amp;&amp;amp; !Gosu::button_down?(Gosu::KB_LEFT_SHIFT)
    @camera_position.x -= speed if Gosu::button_down?(Gosu::KbLeft) &amp;amp;&amp;amp; !Gosu::button_down?(Gosu::KB_LEFT_SHIFT)
    @camera_position.y += speed if Gosu::button_down?(Gosu::KbUp) &amp;amp;&amp;amp; !Gosu::button_down?(Gosu::KB_LEFT_SHIFT)
    @camera_position.y -= speed if Gosu::button_down?(Gosu::KbDown) &amp;amp;&amp;amp; !Gosu::button_down?(Gosu::KB_LEFT_SHIFT)
    @camera_position.z += speed if Gosu::button_down?(Gosu::KB_NUMPAD_8) &amp;amp;&amp;amp; !Gosu::button_down?(Gosu::KB_LEFT_SHIFT)
    @camera_position.z -= speed if Gosu::button_down?(Gosu::KB_NUMPAD_2) &amp;amp;&amp;amp; !Gosu::button_down?(Gosu::KB_LEFT_SHIFT)

    @look_at_object_position.x += speed if Gosu::button_down?(Gosu::KbRight) &amp;amp;&amp;amp; Gosu::button_down?(Gosu::KB_LEFT_SHIFT)
    @look_at_object_position.x -= speed if Gosu::button_down?(Gosu::KbLeft) &amp;amp;&amp;amp; Gosu::button_down?(Gosu::KB_LEFT_SHIFT)
    @look_at_object_position.y += speed if Gosu::button_down?(Gosu::KbUp) &amp;amp;&amp;amp; Gosu::button_down?(Gosu::KB_LEFT_SHIFT)
    @look_at_object_position.y -= speed if Gosu::button_down?(Gosu::KbDown) &amp;amp;&amp;amp; Gosu::button_down?(Gosu::KB_LEFT_SHIFT)
    @look_at_object_position.z += speed if Gosu::button_down?(Gosu::KB_NUMPAD_8) &amp;amp;&amp;amp; Gosu::button_down?(Gosu::KB_LEFT_SHIFT)
    @look_at_object_position.z -= speed if Gosu::button_down?(Gosu::KB_NUMPAD_2) &amp;amp;&amp;amp; Gosu::button_down?(Gosu::KB_LEFT_SHIFT)
  end
end
</code></pre>

<p>To understand how everything works, I bind each axis to a key. Here is the schema to move the camera:</p>

<pre><code class="text">UP, DOWN - by Y axis
LEFT, RIGHT - by X axis
NUM8, NUM2 - by Z axis
</code></pre>

<p>To move the target point, you need to hold shift, clicking on the same buttons.
I can display the current coordinates of points and the current camera speed using gosu’s text output methods. To do this, we need to pass a ‘window’ object into our class and work with it. For camera position, I wrote a <code>Vector3</code> class that contains x, y and z coordinates:
<code>objects/vector3.rb</code>:</p>

<pre><code class="ruby">Vector3 = Struct.new(:x, :y, :z)
</code></pre>

<p>After we build our camera class, let’s use it inside <code>run.rb</code>:</p>

<pre><code class="ruby">def draw
  gl do
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    gluPerspective(90, width.to_f/height, 0, 500)
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()

    @camera.capture

    glPushMatrix
      glTranslated(width/2, height/2, 0)
      Axis.draw(100, 100, 100)
      Cube.draw(50, 50, 50, GL_FRONT_AND_BACK, GL_LINE)
    glPopMatrix

    Cube.draw(50, 50, 50, GL_FRONT_AND_BACK, GL_FILL)

    Axis.draw(100, 100, 100, true)

  end
end
</code></pre>

<p>‘Fly’ a bit on our scene to see how <code>gluLookAt</code> works.
I suggest rewriting the keyboard settings a bit to make them more useful. Also, I want to be able to increase our camera’s speed. For this I want to rewrite the camera object:
<code>objects/camera.rb</code></p>

<pre><code class="ruby">def button_down
  check_speed
  case
  when Gosu::button_down?(Gosu::KbD)
    @camera_position.x += speed
    @look_at_object_position.x += speed
  when Gosu::button_down?(Gosu::KbA)
    @camera_position.x -= speed
    @look_at_object_position.x -= speed
  when Gosu::button_down?(Gosu::KbW)
    @camera_position.z -= speed
    @look_at_object_position.z -= speed
  when Gosu::button_down?(Gosu::KbS)
    @camera_position.z += speed
    @look_at_object_position.z += speed
  when Gosu::button_down?(Gosu::KbUp)
    @look_at_object_position.y += speed
  when Gosu::button_down?(Gosu::KbDown)
    @look_at_object_position.y -= speed
  when Gosu::button_down?(Gosu::KbRight)
    @look_at_object_position.x += speed
  when Gosu::button_down?(Gosu::KbLeft)
    @look_at_object_position.x -= speed
  end
end

def check_speed
  @speed = 10
  @speed = 20 if Gosu::button_down?(Gosu::KB_LEFT_SHIFT)
end
</code></pre>

<p>Let’s use the W and S keys to move the camera on the z axis, A and D to move the camera on the x axis, UP and DOWN to move the target of view on the y axis and LEFT and RIGHT to move the target of view on the x axis. Holding shift will increase our speed.</p>

<h2>LET’S PLAY!</h2>

<p>Let’s add a cube object filled with lines to our pointer. To do this, we need to update our cube code to receive the current coordinates and build a cube depending on them.
<code>objects/cube.rb</code> :</p>

<pre><code class="ruby">require 'pry'
class Cube
  attr_reader :position, :x_width, :y_width, :z_width, :mode, :mode_face

  def initialize(x_width, y_width, z_width, mode_face, mode, x = 0, y = 0, z = 0)
    @x_width = x_width
    @y_width = y_width
    @z_width = z_width
    @mode = mode
    @mode_face = mode_face
    @position = Vector3.new(x, y, z)
  end

  def self.draw(x_width, y_width, z_width, mode_face = GL_FRONT_AND_BACK, mode = GL_FILL, x = 0, y = 0, z = 0)
    object = new(x_width, y_width, z_width, mode_face, mode, x, y, z)
    object.draw
  end

  def draw
    glPolygonMode(mode_face, mode);
    glBegin(GL_QUADS)
      #yx
      glColor3d(1, 0, 0)
      glVertex3d(position.x, position.y, position.z)
      glVertex3d(x_width + position.x, position.y, position.z)
      glVertex3d(x_width + position.x, y_width + position.y, position.z)
      glVertex3d(position.x, y_width + position.y, position.z)
      #yz
      glColor3d(0, 1, 0)
      glVertex3d(position.x, y_width + position.y, position.z)
      glVertex3d(position.x, position.y, position.z)
      glVertex3d(position.x, position.y, z_width + position.z)
      glVertex3d(position.x, y_width + position.y, z_width + position.z)
      #zx
      glColor3d(0, 0, 1)
      glVertex3d(position.x, position.y, z_width + position.z)
      glVertex3d(position.x, position.y, position.z)
      glVertex3d(x_width + position.x, position.y, position.z)
      glVertex3d(x_width + position.x, position.y, z_width + position.z)
      #z -&amp;gt; yx
      glColor3d(1, 0, 0)
      glVertex3d(position.x, position.y, z_width + position.z)
      glVertex3d(x_width + position.x, position.y, z_width + position.z)
      glVertex3d(x_width + position.x, y_width + position.y, z_width + position.z)
      glVertex3d(position.x, y_width + position.y, z_width + position.z)
      #x -&amp;gt; yz
      glColor3d(0, 1, 0)
      glVertex3d(x_width + position.x, y_width + position.y, position.z)
      glVertex3d(x_width + position.x, position.y, position.z)
      glVertex3d(x_width + position.x, position.y, z_width + position.z)
      glVertex3d(x_width + position.x, y_width + position.y, z_width + position.z)
      #y -&amp;gt; zx
      glColor3d(0, 0, 1)
      glVertex3d(position.x, y_width + position.y, z_width + position.z)
      glVertex3d(position.x, y_width + position.y, position.z)
      glVertex3d(x_width + position.x, y_width + position.y, position.z)
      glVertex3d(x_width + position.x, y_width + position.y, z_width + position.z)

      glColor3d(1, 1, 1) #return back primary color
    glEnd
  end
end
</code></pre>

<p>Now we can update our main window’s method draw with this code</p>

<pre><code class="ruby">glPushMatrix
 glTranslated(width/2, height/2, 0)
 Axis.draw(100, 100, 100)
 Cube.draw(50, 50, 50, GL_FRONT_AND_BACK, GL_FILL)
 Cube.draw(50, 50, 50, GL_FRONT_AND_BACK, GL_LINE, @camera.look_at_object_position.x, @camera.look_at_object_position.y, @camera.look_at_object_position.z)
glPopMatrix
</code></pre>

<p>At the end, you should see this view:</p>

<p><img src="/images/ruby_opengl/diatom_opengl-14.jpg"></p>

<h2>CUBE CREATOR</h2>

<p>What if we want to place some new cubes? Easy!
Let’s change our <code>run.rb</code> code to</p>

<pre><code class="ruby">require 'opengl'
require 'glu'
require 'gosu'

Dir["objects/*"].each {|file| require_relative file }

include Gl, Glu

class Window &lt; Gosu::Window

  attr_accessor :scene_objects, :translation

  def initialize
    super 800, 600
    self.caption = "Diatom's OpenGL Tutorial"
    @camera = Camera.new(self)
    @scene_objects = []
    @translation = Vector3.new(width/2, height/2,0)
  end

  def update
  end

  def draw
    gl do
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

      glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        gluPerspective(90, width.to_f/height, 0, 500)
        glMatrixMode(GL_MODELVIEW)
        glLoadIdentity()
      @camera.capture

      @scene_objects &lt;&lt; Axis.new(100, 100, 100)
      @scene_objects &lt;&lt; Cube.new(50, 50, 50, GL_FRONT_AND_BACK, GL_FILL)

      glPushMatrix
        glTranslated(translation.x, translation.y, translation.z)
        @scene_objects.each do |object|
          object.draw
        end
      glPopMatrix
      Cube.draw(50, 50, 50, GL_FRONT_AND_BACK, GL_LINE, @camera.look_at_object_position.x, @camera.look_at_object_position.y, @camera.look_at_object_position.z)

      Cube.draw(50, 50, 50, GL_FRONT_AND_BACK, GL_FILL)

      Axis.draw(100, 100, 100, true)
    end
  end

  def button_down(id)
    exit if id == Gosu::KbEscape
    add_cube if id == Gosu::KbSpace
  end
  def add_cube
    @scene_objects &lt;&lt; Cube.new(
      50, 50, 50,
      GL_FRONT_AND_BACK, GL_FILL,
      @camera.look_at_object_position.x - translation.x, @camera.look_at_object_position.y - translation.y, @camera.look_at_object_position.z - translation.z
    )
  end
end

Window.new.show
</code></pre>

<p>As you will notice, I moved the translation vector to the variable of Vector3 class, moved all objects that will be translated and drawn on the scene to the array <code>@scene_objects</code> and then placed them on the scene with a loop.
To add a new cube, I can just create a new cube object and place it in the array. Coordinates should depend on the translation vector to place everything on valid places.</p>

<p><img src="/images/ruby_opengl/diatom_opengl-28.jpg"></p>

<p>Let’s add some textures. We can create a gosu image object from file and then get texture information from it with the <code>gl_tex_info</code> method. To build it, let’s add a class <code>texture</code>.</p>

<pre><code class="ruby">class Texture
  attr_accessor :info
  def initialize(window, filepath)
    @image = Gosu::Image.new(window, filepath, {tileable: true, retro: false})
    @info = @image.gl_tex_info
    # gl_tex_info can return nil if the image was too large to fit onto
    # a single OpenGL texture and was internally split up.
  end
end
</code></pre>

<p>Then we will need to update our cube <code>draw</code> method with:
<code>ruby
texture_info = texture.info
  glEnable(GL_TEXTURE_2D) # enables two-dimensional texturing to perform
    glBindTexture(GL_TEXTURE_2D, texture_info.tex_name) # bing named texture to a target
    glPixelStorei(GL_UNPACK_ALIGNMENT,1)
    draw_textured_cube
  glDisable(GL_TEXTURE_2D)
</code></p>

<p>where specify the texture’s edge that will be assigned to that point. Basically, the texture’s left bottom coordinates are (0, 0) and top right coordinates are (1, 1), and we stretch it between the edges of our cube. Code sample for one side:</p>

<pre><code class="ruby">glTexCoord2d(0,0); glVertex3d(position.x, position.y, position.z)
glTexCoord2d(1,0); glVertex3d(x_width + position.x, position.y, position.z)
glTexCoord2d(1,1); glVertex3d(x_width + position.x, y_width + position.y, position.z)
glTexCoord2d(0,1); glVertex3d(position.x, y_width + position.y, position.z)
</code></pre>

<p>By adding some lights with
<code>ruby
glEnable(GL_LIGHTING)
  glLightfv(GL_LIGHT0, GL_AMBIENT, [0.5, 0.5, 0.5, 1])
  glLightfv(GL_LIGHT0, GL_DIFFUSE, [1, 1, 1, 1])
  glLightfv(GL_LIGHT0, GL_POSITION, [1, 1, 1,1])
  glLightfv(GL_LIGHT1, GL_AMBIENT, [0.5, 0.5, 0.5, 1])
  glLightfv(GL_LIGHT1, GL_DIFFUSE, [1, 1, 1, 1])
  glLightfv(GL_LIGHT1, GL_POSITION, [100, 100, 100,1])
glEnable(GL_LIGHT0)
</code>
depth test to depth buffer comparisons
<code>ruby
glEnable(GL_DEPTH_TEST);
glDepthMask(GL_TRUE);
glDepthFunc(GL_LEQUAL);
</code></p>

<p>and textures with</p>

<pre><code class="ruby">glEnable(GL_TEXTURE_2D) # enables two-dimensional texturing to perform
glBindTexture(GL_TEXTURE_2D, texture_info.tex_name) # bing named texture to a target
glPixelStorei(GL_UNPACK_ALIGNMENT,1)
</code></pre>

<p>we can build nice textured scene with real lighting.</p>

<p><img src="/images/ruby_opengl/diatom_opengl.jpg"></p>

<p>With some additional work, we can achieve a switch of material for blocks that we are trying to build and other nice things.</p>

<p>Video: <a href="https://youtu.be/aKyR4a5SGbo">YouTube</a>
All the code for that can be found at <a href="https://github.com/DiatomEnterprises/ruby_opengl">our repository on GitHub</a></p>

<p>OpenGL is common everywhere and learning it once, you will be able to build projects with it on any language. The same is with Ruby. Just imagine something cool, and we can build it with Ruby!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gamedev on Ruby? Why Not!]]></title>
    <link href="http://akovtunov.github.io/blog/2017/04/23/gamedev-on-ruby-why-not/"/>
    <updated>2017-04-23T12:18:04+02:00</updated>
    <id>http://akovtunov.github.io/blog/2017/04/23/gamedev-on-ruby-why-not</id>
    <content type="html"><![CDATA[<blockquote><p>This is a copy of my <a href="http://www.diatomenterprises.com/gamedev-on-ruby-why-not/">original post for Diatom Enterprises</a></p></blockquote>

<p><img class="center" src="/images/ruby_snake/Screenshot-from-2016-08-17-034112.png"></p>

<p>This article isn’t about big games with sophisticated graphics, nor will I be creating something like MMORPG (even though, I think it’s possible). In this article, I will be creating a terminal Snake Game.
I know a lot of developers; including myself, who got started in programming, because they were crazy about games. They wanted to create something similar to what they had played before, but in the end, for some reason they are doing programming that has nothing to do with gamedev. So in this article I will be going though the steps to create a simple game in <a href="http://www.diatomenterprises.com/technologies/ruby-on-rails/">Ruby language</a>, which most of us use for various web-applications.</p>

<!--more-->


<h2>PREPARATIONS</h2>

<p>I prefer to use ruby 2.3.1 with structured code and folders. For the Snake Game, I recommend the following folder structure:
<code>plain
ruby_snake/
–lib/
|– Files that will create game mechanics
–spec/
|– spec_helper.rb
|– Test files
Gemfile
start.rb
</code></p>

<p>The <code>Gemfile</code> contains a few gems: RSpec for tests and Pry for debugging our application. <code>Gemfile</code>:
<code>ruby
source 'https://rubygems.org'
gem 'rspec'
gem 'pry'
</code></p>

<p>For <code>rspec</code>, setup a <code>spec_helper.rb</code>. This file will contain each lib file and configure RSpec for our needs. <code>spec/spec_helper.rb</code> should be included in each test.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">.</span><span class="n">.</span><span class="o">/</span><span class="n">lib</span><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;.</span><span class="n">rb</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="no">FILE</span><span class="o">&lt;</span><span class="sr">/strong&gt;))].each do |file|</span>
</span><span class='line'><span class="sr">  require file</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">Dir[File.expand_path(&amp;lsquo;../</span><span class="n">lib</span><span class="o">/</span><span class="n">errors</span><span class="o">/&lt;</span><span class="sr">/em&gt;.rb&amp;rsquo;, File.dirname(&lt;strong&gt;FILE&lt;/s</span><span class="n">trong</span><span class="o">&gt;</span><span class="p">))</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">require</span> <span class="n">file</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># Use color in STDOUT</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">color</span> <span class="o">=</span> <span class="kp">true</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # Use color not only in STDOUT but also in pagers and files</span>
</span><span class='line'><span class="sr">  config.tty = true&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># Use the specified formatter</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">formatter</span> <span class="o">=</span> <span class="ss">:documentation</span> <span class="c1"># :progress, :html, :textmate</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>THE STRUCTURE OF THE GAME</h2>

<p>Can you imagine all the game components? It should look something like this:
<code>plain
. . . . . . . . .
. . . . . . . . .
. . . . . . . . .
. . . . . . . . .
. . x x x x . o .
. . . . . . . . .
. . . . . . . . .
. . . . . . . . .
. . . . . . . . .
</code>
Here you can see the <code>Board</code>, the <code>Snake</code> and the <code>Food</code>.
In addition, you will need something that will connect all these things together – the <code>Game</code>.
Let’s look closely at these components.</p>

<h2>THE BOARD</h2>

<p>The <code>Board</code> has a width and a length, in our sample the width is 9 and the length is 9.
<code>plain
  1 2 3 4 5 6 7 8 9
1 . . . . . . . . .
2 . . . . . . . . .
3 . . . . . . . . .
4 . . . . . . . . .
5 . . . . . . . . .
6 . . . . . . . . .
7 . . . . . . . . .
8 . . . . . . . . .
9 . . . . . . . . .
</code>
So, let’s write some tests that will cover our Board.</p>

<pre><code class="ruby">require 'spec_helper'
describe Board do
  describe "#new" do
    it "initializes gameboard with board" do
      expect(Board.new(40,40).board).not_to be_nil
    end
  end
  describe "#create_board" do
    let(:gameboard){Board.new(40,40)}
    it "returns an array" do
      expect(gameboard.board).to be_instance_of(Array)
    end
    it "returns an array with given size" do
      expect(gameboard.board.size).to be_eql(40)
      expect(gameboard.board[0].size).to be_eql(40)
    end
    it "returns board full of . symbols" do
      expect(gameboard.board.first.first).to eql('.')
    end
  end
end
</code></pre>

<p>And specifically this will create our Board and its methods:</p>

<pre><code class="ruby">class Board
  attr_reader :length, :width, :board

  def initialize(width, length)
    @length = length
    @width = width
    create_board
  end

  def center
    [board.length/2, board.first.length/2]
  end

  def print_text(text)
    char_center = text.length/2
    i = 0
    text.chars.each do |char|
      board[center.first][center.last - char_center + i] = char
      i+=1
    end
  end

  def create_board
    @board = Array.new(length){ Array.new(width, '.') }
  end

end
</code></pre>

<p>You can’t change the <code>length</code>, or the <code>width</code> of the board or the board itself after initialization, so I have made them readable only.
Let’s walk through the code.</p>

<ul>
<li><code>center</code> – will calculate center points of the created Board;</li>
<li><code>print_text</code> – will print the given text in the middle of the Board;</li>
<li><code>create_board</code> – will create the Board and fill it with <code>“.”</code> to show this later on the screen.
Did you notice that I used a <code>block</code> to create an array, instead of <code>Array.new (length, Array.new(width, '.'))</code>?
At first sight the lines looks similar to each other, but if we look under the hood, you will notice that the block creates array each time, so <code>array[0].object_id</code> won’t be the same as: <code>array[1].object_id</code>.
And without the <code>block</code>, arrays will be identical.
<code>ruby
pry(main)&gt; array = Array.new(length){ Array.new(width, '.') }
=&gt; [[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."]]
pry(main)&gt; array[0].object_id
=&gt; 5689040
pry(main)&gt; array[1].object_id
=&gt; 5689000
</code>
<code>ruby
pry(main)&gt; array2 = Array.new(length, Array.new(width, '.'))
=&gt; [[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", ".", "."]]
pry(main)&gt; array2[0].object_id
=&gt; 14755060
pry(main)&gt; array2[1].object_id
=&gt; 14755060
</code></li>
</ul>


<p>If make changes in the first line, this will immediately lead to changes in another.</p>

<h2>THE SNAKE</h2>

<p>After you have created a board sample, it is time to create your ‘hero’! Here is the file to set the requirements for the snake and to tests your future snake <code>snake_spec.rb</code>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">spec_helper</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Snake</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:snake</span><span class="p">){</span><span class="no">Snake</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)}</span>
</span><span class='line'>  <span class="n">describe</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#new&amp;rdquo; do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:snake</span><span class="p">){</span><span class="no">Snake</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)}</span>
</span><span class='line'>    <span class="n">it</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">snake</span> <span class="n">is</span> <span class="n">an</span> <span class="n">array</span> <span class="n">of</span> <span class="n">body</span> <span class="n">parts</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_kind_of</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_eql</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">it</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">initializes</span> <span class="n">snake</span> <span class="n">head</span> <span class="n">position</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">first</span><span class="p">)</span><span class="o">.</span><span class="n">not_to</span> <span class="n">be_nil</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">first</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_kind_of</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_eql</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">first</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_kind_of</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">last</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_kind_of</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">it</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">initializes</span> <span class="n">snake</span> <span class="n">length</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_eql</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">it</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">initializes</span> <span class="n">snake</span> <span class="n">direction</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">direction</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_eql</span><span class="p">(</span><span class="ss">:left</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  it &amp;ldquo;#step should add one part and remove the last one from the snake&amp;rdquo; do</span>
</span><span class='line'><span class="sr">    old_snake = snake</span>
</span><span class='line'><span class="sr">      new_head = [snake.parts.first.first,snake.parts.first.last]</span>
</span><span class='line'><span class="sr">      old_snake.parts.unshift(new_head).pop</span>
</span><span class='line'><span class="sr">    snake.step</span>
</span><span class='line'><span class="sr">    expect(snake.parts).to be_eql(old_snake.parts)</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">it</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#turn should change snake&amp;rsquo;s direction&amp;rdquo; do</span>
</span><span class='line'>    <span class="n">snake</span><span class="o">.</span><span class="n">turn</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">w</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">direction</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="ss">:up</span><span class="p">)</span>
</span><span class='line'>    <span class="n">snake</span><span class="o">.</span><span class="n">turn</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">direction</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="ss">:left</span><span class="p">)</span>
</span><span class='line'>    <span class="n">snake</span><span class="o">.</span><span class="n">turn</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span><span class="s1">&#39;)</span>
</span><span class='line'><span class="s1">    expect(snake.direction).to eql(:down)</span>
</span><span class='line'><span class="s1">    snake.turn(&amp;rsquo;d&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">snake</span><span class="o">.</span><span class="n">direction</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="ss">:right</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  it &amp;ldquo;#update_head updates snake&amp;rsquo;s head position if snake mets wall&amp;rdquo; do</span>
</span><span class='line'><span class="sr">    snake_head = snake.parts.first</span>
</span><span class='line'><span class="sr">    snake_head[0] = 2</span>
</span><span class='line'><span class="sr">    snake.update_head(0, 2)</span>
</span><span class='line'><span class="sr">    expect(snake.parts.first).to be_eql(snake_head)</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">it</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#increase increases snake after food being eaten&amp;rdquo; do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">{</span><span class="n">snake</span><span class="o">.</span><span class="n">increase</span><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">{</span><span class="n">snake</span><span class="o">.</span><span class="n">size</span><span class="p">}</span><span class="o">.</span><span class="n">from</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">{</span><span class="n">snake</span><span class="o">.</span><span class="n">increase</span><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">{</span><span class="n">snake</span><span class="o">.</span><span class="n">parts</span><span class="o">.</span><span class="n">length</span><span class="p">}</span><span class="o">.</span><span class="n">from</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span><span class='line'><span class="sr">&lt;code&gt;</span>
</span><span class='line'><span class="sr">As you can see, I want the `Snake` to be an array of ‘parts’, which means a small `array` of coordinates.</span>
</span><span class='line'><span class="sr">Let me explain this. Let’s draw our Snake as an array:</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">plain</span>
</span><span class='line'><span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;.     .     .     .     .     .     .     .     .</span>
</span><span class='line'><span class="sr">.     .     .     .     .     .     .     .     .&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;.     .   [2,4] [3,4] [4,4] [5,4]   .     .     .&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;.     .     .     .     .     .     .     .     .&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;.     .     .     .     .     .     .     .     .</span>
</span><span class='line'><span class="sr">&lt;code&gt;</span>
</span><span class='line'><span class="sr">Now, if you need to move the Snake or change its direction, you can manage those blocks. You can add a part to the head and remove the last part from the tail. Or if the Snake eats the food block, you can just add it to the tail as well!</span>
</span><span class='line'><span class="sr">Turning the Snake is quite simple. You can add block in any direction from the current head block and remove the Snake’s last tail element. The Snake can be moved by one part in any direction.</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">plain</span>
</span><span class='line'><span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;.     .     .     .     .     .     .     .     .</span>
</span><span class='line'><span class="sr">.     .     .     .     .     .     .     .     .&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;.     .   [2,4] [3,4] [4,4]   .     .     .     .&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;.</span>     <span class="o">.</span>   <span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>   <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;.     .     .     .     .     .     .     .     .&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span>     <span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;.     .     .     .     .     .     .     .     .</span>
</span><span class='line'><span class="sr">&lt;code&gt;``</span>
</span><span class='line'><span class="sr">You will now need to create the Snake part with new coordinates, taking blocks from the head and changing its positions depending on the direction. Then, you can use&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">parts</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">new_head</span><span class="p">)</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">to</span> <span class="n">add</span> <span class="n">the</span> <span class="kp">new</span> <span class="n">block</span> <span class="n">to</span> <span class="n">the</span> <span class="n">beginning</span> <span class="ow">and</span><span class="o">&lt;</span><span class="sr">/code&gt;parts.pop` to remove the last one from the array.</span>
</span><span class='line'><span class="sr">If the snake eats ‘food’, you will create another part at the end of the Snake and update its size. If the snake meets the wall, you can simply move it to the other wall by changing its head coordinates.&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;ruby&quot;</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Snake</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:size</span><span class="p">,</span> <span class="ss">:direction</span><span class="p">,</span> <span class="ss">:position</span><span class="p">,</span> <span class="ss">:parts</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">max_x</span><span class="p">,</span> <span class="n">max_y</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@size</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>    <span class="vi">@direction</span> <span class="o">=</span> <span class="ss">:left</span>
</span><span class='line'>    <span class="vi">@parts</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">set_start_position</span><span class="p">(</span><span class="n">max_x</span><span class="p">,</span> <span class="n">max_y</span><span class="p">)</span>
</span><span class='line'>    <span class="n">create_snake</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_snake</span>
</span><span class='line'>    <span class="n">size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">iteration</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@parts</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">lt</span><span class="p">;</span> <span class="o">[</span><span class="n">position</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">position</span><span class="o">[</span><span class="mi">1</span><span class="o">]+</span><span class="n">iteration</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">head</span>
</span><span class='line'>    <span class="n">parts</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">body</span>
</span><span class='line'>    <span class="n">parts</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.parts</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_start_position</span><span class="p">(</span><span class="n">max_x</span><span class="p">,</span> <span class="n">max_y</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@position</span> <span class="o">=</span> <span class="o">[</span><span class="no">Random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.max_x</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="no">Random</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.max_y</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">increase</span>
</span><span class='line'>    <span class="vi">@size</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="vi">@parts</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">lt</span><span class="p">;</span> <span class="n">parts</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update_head</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@parts</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">turn</span><span class="p">(</span><span class="n">key_code</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@direction</span> <span class="o">=</span> <span class="k">case</span> <span class="n">key_code</span><span class="o">.</span><span class="n">chr</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;w&#39;</span> <span class="o">||</span> <span class="s1">&#39;W&#39;</span>
</span><span class='line'>      <span class="ss">:up</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;s&#39;</span> <span class="o">||</span> <span class="s1">&#39;S&#39;</span>
</span><span class='line'>      <span class="ss">:down</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;a&#39;</span> <span class="o">||</span> <span class="s1">&#39;A&#39;</span>
</span><span class='line'>      <span class="ss">:left</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;d&#39;</span> <span class="o">||</span> <span class="s1">&#39;D&#39;</span>
</span><span class='line'>      <span class="ss">:right</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">direction</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">step</span>
</span><span class='line'>    <span class="n">new_head</span> <span class="o">=</span> <span class="o">[</span><span class="n">head</span><span class="o">.</span><span class="n">first</span><span class="p">,</span><span class="n">head</span><span class="o">.</span><span class="n">last</span><span class="o">]</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">direction</span>
</span><span class='line'>    <span class="k">when</span> <span class="ss">:left</span>
</span><span class='line'>      <span class="n">new_head</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">when</span> <span class="ss">:right</span>
</span><span class='line'>      <span class="n">new_head</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">when</span> <span class="ss">:up</span>
</span><span class='line'>      <span class="n">new_head</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">when</span> <span class="ss">:down</span>
</span><span class='line'>      <span class="n">new_head</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">parts</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">new_head</span><span class="p">)</span>
</span><span class='line'>    <span class="n">parts</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Let</span><span class="err">’</span><span class="n">s</span> <span class="n">walk</span> <span class="n">through</span> <span class="n">the</span> <span class="n">code</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;ul&gt;</span>
</span><span class='line'><span class="sr">&lt;li&gt;&lt;code&gt;initialize&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="err">–</span> <span class="n">creates</span> <span class="n">start</span> <span class="n">parameters</span> <span class="k">for</span> <span class="n">the</span> <span class="no">Snake</span><span class="p">,</span> <span class="n">sets</span> <span class="n">start</span> <span class="n">position</span> <span class="ow">and</span> <span class="n">creates</span> <span class="n">the</span> <span class="no">Snake</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/li&gt;</span>
</span><span class='line'><span class="sr">&lt;li&gt;&lt;code&gt;create_snake&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="err">–</span> <span class="n">creates</span> <span class="no">Snake</span><span class="p">,</span> <span class="n">using</span> <span class="n">size</span> <span class="n">variable</span> <span class="n">to</span> <span class="n">define</span> <span class="no">Snake</span><span class="err">’</span><span class="n">s</span> <span class="n">length</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/li&gt;</span>
</span><span class='line'><span class="sr">&lt;li&gt;&lt;code&gt;head&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="err">–</span> <span class="n">returns</span> <span class="n">head</span> <span class="n">part</span> <span class="n">of</span> <span class="no">Snake</span><span class="o">&lt;</span><span class="sr">/li&gt;</span>
</span><span class='line'><span class="sr">&lt;li&gt;&lt;code&gt;body&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="err">–</span> <span class="n">returns</span> <span class="n">all</span> <span class="n">other</span> <span class="n">parts</span><span class="p">,</span> <span class="n">that</span> <span class="n">you</span> <span class="n">can</span> <span class="n">call</span> <span class="n">as</span> <span class="err">‘</span><span class="n">body</span><span class="err">’</span><span class="o">&lt;</span><span class="sr">/li&gt;</span>
</span><span class='line'><span class="sr">&lt;li&gt;&lt;code&gt;set_start_position&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="err">–</span> <span class="n">randomly</span> <span class="n">set</span> <span class="n">start</span> <span class="n">position</span> <span class="n">of</span> <span class="n">the</span> <span class="no">Snake</span><span class="o">&lt;</span><span class="sr">/li&gt;</span>
</span><span class='line'><span class="sr">&lt;li&gt;&lt;code&gt;update_head&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="err">–</span> <span class="n">updates</span> <span class="n">head</span><span class="p">,</span> <span class="k">if</span> <span class="n">snake</span> <span class="n">meet</span> <span class="n">wall</span><span class="o">&lt;</span><span class="sr">/li&gt;</span>
</span><span class='line'><span class="sr">&lt;li&gt;&lt;code&gt;increase&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="err">–</span> <span class="n">increases</span> <span class="n">snake</span><span class="err">’</span><span class="n">s</span> <span class="n">size</span><span class="p">,</span> <span class="k">if</span> <span class="n">the</span> <span class="no">Snake</span> <span class="n">eats</span> <span class="n">food</span><span class="o">&lt;</span><span class="sr">/li&gt;</span>
</span><span class='line'><span class="sr">&lt;li&gt;&lt;code&gt;turn&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="err">–</span> <span class="n">changes</span> <span class="no">Snake</span><span class="err">’</span><span class="n">s</span> <span class="n">direction</span><span class="o">&lt;</span><span class="sr">/li&gt;</span>
</span><span class='line'><span class="sr">&lt;li&gt;&lt;code&gt;step&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="err">–</span> <span class="n">moves</span> <span class="no">Snake</span><span class="err">’</span><span class="n">s</span> <span class="n">each</span> <span class="n">iteration</span><span class="o">&lt;</span><span class="sr">/li&gt;</span>
</span><span class='line'><span class="sr">&lt;/u</span><span class="n">l</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Now</span> <span class="n">your</span> <span class="no">Snake</span> <span class="n">needs</span> <span class="n">to</span> <span class="n">eat</span> <span class="n">something</span><span class="o">.</span> <span class="no">Let</span><span class="err">’</span><span class="n">s</span> <span class="n">write</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">Food</span><span class="o">&lt;</span><span class="sr">/code&gt; object!&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="no">FEEDING</span> <span class="no">THE</span> <span class="no">SNAKE</span><span class="o">&lt;</span><span class="sr">/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Food is a small object, that has only two coordinates, it will be reinitialized the moment after the Snake will eats it.</span>
</span><span class='line'><span class="sr">Let me describe it, using tests:</span>
</span></code></pre></td></tr></table></div></figure> ruby
require &lsquo;spec_helper&rsquo;
describe Food do
  let(:food_item){ Food.new(25, 25) }
  describe &ldquo;#new&rdquo; do
    it &ldquo;initializes food item with start coords&rdquo; do
      expect(food_item).not_to be_nil
      expect(food_item.x).not_to be_nil
      expect(food_item.y).not_to be_nil
    end
  end</p>

<p>  it &ldquo;#coordinates returns array of food&rsquo;s coords&rdquo; do
    expect(food_item.coordinates).to eq([food_item.x, food_item.y])
  end
end
<code>
Later, when the Snake’s head coordinates are over a Food coordinates, the game will show that the Snake ate the food. The snake will then increase in size and the Food object will reinitialize. That’s why the Food should be randomly generated.
</code> ruby
class Food
  attr_reader :x, :y</p>

<p>  def initialize(board_max_x, board_max_y)
    @x = Random.rand(board_max_x-1)
    @y = Random.rand(board_max_y-1)
  end</p>

<p>  def coordinates
    [x,y]
  end
end
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">What</span> <span class="n">will</span> <span class="n">happen</span><span class="p">,</span> <span class="k">if</span> <span class="n">the</span> <span class="no">Snake</span> <span class="n">chooses</span> <span class="n">to</span> <span class="n">eat</span> <span class="n">itself?</span> <span class="no">You</span> <span class="n">will</span> <span class="n">need</span> <span class="n">to</span> <span class="n">create</span> <span class="n">some</span> <span class="n">errors</span> <span class="k">for</span> <span class="n">this</span> <span class="k">case</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h2&gt;THROWING ERROR&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">We</span> <span class="n">can</span> <span class="n">create</span> <span class="n">different</span> <span class="n">errors</span> <span class="k">for</span> <span class="n">different</span> <span class="n">cases</span><span class="o">.</span> <span class="no">For</span> <span class="n">example</span><span class="p">,</span> <span class="n">the</span> <span class="no">Snake</span> <span class="n">can</span> <span class="n">meet</span> <span class="n">walls</span> <span class="n">sometimes</span><span class="p">,</span> <span class="n">through</span> <span class="n">which</span> <span class="n">it</span> <span class="n">could</span> <span class="n">go</span> <span class="n">through</span> <span class="ow">or</span> <span class="n">which</span> <span class="n">it</span> <span class="n">could</span> <span class="n">eat</span><span class="o">.</span> <span class="no">If</span> <span class="n">you</span> <span class="n">would</span> <span class="n">like</span> <span class="n">to</span> <span class="n">create</span> <span class="n">some</span> <span class="n">blocks</span><span class="p">,</span> <span class="n">it</span> <span class="n">may</span> <span class="n">randomly</span> <span class="n">appear</span> <span class="n">on</span> <span class="n">the</span> <span class="no">Board</span> <span class="ow">and</span> <span class="n">the</span> <span class="no">Snake</span> <span class="n">will</span> <span class="n">smash</span> <span class="n">into</span> <span class="n">them</span><span class="o">.</span> <span class="no">For</span> <span class="n">this</span> <span class="n">situations</span> <span class="n">you</span> <span class="n">need</span> <span class="n">to</span> <span class="n">create</span> <span class="n">some</span> <span class="n">errors</span><span class="o">.</span>
</span><span class='line'><span class="n">I</span> <span class="n">created</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">lib</span><span class="o">/</span><span class="n">errors</span><span class="o">/</span><span class="n">ate_itself_error</span><span class="o">.</span><span class="n">rb</span><span class="o">&lt;</span><span class="sr">/code&gt; file for these situations, such as The Snake eating itself.</span>
</span><span class='line'><span class="sr">It easily creates a new error class to determine the situation.</span>
</span><span class='line'><span class="sr">&lt;code&gt;ruby</span>
</span><span class='line'><span class="sr">class AteItselfError &amp;lt; StandardError;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="no">You</span> <span class="n">will</span> <span class="n">use</span> <span class="n">it</span> <span class="n">later</span> <span class="k">in</span> <span class="n">our</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">Game</span><span class="o">&lt;</span><span class="sr">/code&gt; class.&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="no">THE</span> <span class="no">GAME</span> <span class="no">MECHANICS</span><span class="o">&lt;</span><span class="sr">/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Now it’s time to write the mechanics for the Game.</span>
</span><span class='line'><span class="sr">I have created a list of requirements, excluding the ones that show our information at the terminal.</span>
</span><span class='line'><span class="sr">&lt;code&gt;spec/</span><span class="n">game_spec</span><span class="o">.</span><span class="n">rb</span><span class="o">&lt;</span><span class="sr">/code&gt;:</span>
</span></code></pre></td></tr></table></div></figure> ruby
require &lsquo;spec_helper&rsquo;
describe Game do
  let(:new_game) {Game.new}
  describe &ldquo;#new&rdquo; do
    it &ldquo;initializes game&rdquo; do
      expect(new_game.gameboard).to be_kind_of(Board)
      expect(new_game.snake).to be_kind_of(Snake)
      expect(new_game.food).to be_kind_of(Food)
    end
  end</p>

<p>  it &ldquo;#check_snake_position checks all checks successfully&rdquo; do
    expect{new_game.check_snake_position}.to_not raise_error(AteItselfError)
    expect{new_game.check_snake_position}.to_not change{new_game.snake.body}
  end</p>

<p>  it &ldquo;#check_if_snake_ate_itself&rdquo; do
    new_game.snake.parts[0] = new_game.snake.parts.last
    expect{new_game.check_if_snake_ate_itself}.to raise_error(AteItselfError)
    expect{new_game.check_snake_position}.to raise_error(AteItselfError)
  end</p>

<p>  it &ldquo;#check_if_snake_met_wall&rdquo; do
    new_game.snake.parts[0][1] = new_game.gameboard.width
    expect{new_game.check_if_snake_met_wall}.to change{new_game.snake.parts[0][1]}.from(new_game.gameboard.width).to(0)
    new_game.snake.parts[0][1] = new_game.gameboard.width
    expect{new_game.check_snake_position}.to change{new_game.snake.parts[0][1]}.from(new_game.gameboard.width).to(0)
  end</p>

<p>  it &ldquo;#check_if_snake_ate_food&rdquo; do
    new_game.snake.parts[0] = new_game.food.coordinates
    expect{new_game.check_if_snake_ate_food}.to change{new_game.snake.size}.from(4).to(5)
    new_game.snake.parts[0] = new_game.food.coordinates
    expect{new_game.check_snake_position}.to change{new_game.snake.size}.from(5).to(6)
  end</p>

<p>  it &ldquo;#compares pressed key&rdquo; do
    expect(new_game.compare_key(65, &lsquo;a&rsquo;)).to be_truthy
    expect(new_game.compare_key(65, &lsquo;A&rsquo;)).to be_truthy
    expect(new_game.compare_key(65, &lsquo;Q&rsquo;)).to be_falsey
  end</p>

<p>  it &ldquo;#execute_action quit on Q&rdquo; do
    expect(new_game.execute_action(&lsquo;q&rsquo;.ord)).to eql(false)
  end</p>

<p>  it &ldquo;#execute_action turn on a&rdquo; do
    expect{new_game.execute_action(&rsquo;d'.ord)}.to change{new_game.snake.direction}.from(:left).to(:right)
    expect(new_game.execute_action(&rsquo;d'.ord)).not_to be_nil
  end
end
<code>
So, now you have identified that your game will create the `Snake`, the `Board` and the `Food` object for you. Then it will be able to check Snake’s position. Checking the Snake’s positions consists of a few steps – to check, if the Snake has eaten itself or not, to check if the Snake has met at wall and to check, if the Snake has eaten food.
Our game must be able to get a key from the keyboard and compare receiver’s value with some char that will turn the Snake or make some game actions. Comparing it, should execute some actions. For example, quit game on `Q` or turn snake on `d`.
Now it’s time to see how this Ruby code will work!
</code> ruby
require &lsquo;io/console&rsquo;
class Game
  attr_reader :gameboard, :snake, :food
  def initialize(max_x=11, max_y=11)
    @gameboard = Board.new(max_x, max_y)
    @snake = Snake.new(gameboard.width, gameboard.length)
    @food = Food.new(gameboard.width, gameboard.length)
  end</p>

<p>  def print_board
    system(&lsquo;clear&rsquo;)
    puts &ldquo;Your size is: #{snake.size} |  [Q]uit&rdquo;
    gameboard.board.each do
      |line| puts line.each{|item| item}.join(&ldquo; &rdquo;)
    end
  end</p>

<p>  def draw_food_and_snake
    gameboard.create_board
    @gameboard.board[food.x][food.y] = &lsquo;o&rsquo;
    snake.parts.each do |part|
      @gameboard.board[part.first][part.last] = &lsquo;x&rsquo;
    end
    print_board
  end</p>

<p>  def show_message(text)
    gameboard.create_board
    gameboard.print_text(text)
    print_board
  end</p>

<p>  def show_start_screen
    start = false
    while start == false
      show_message(&ldquo;[S]tart&rdquo;)
      key = GetKey.getkey
      sleep(0.5)
      if key &amp;&amp; compare_key(key, &rsquo;s')
        start = true
      end
    end
  end</p>

<p>  def check_snake_position
    check_if_snake_met_wall
    check_if_snake_ate_food
    check_if_snake_ate_itself
  end</p>

<p>  def check_if_snake_ate_itself
    if snake.body.include? snake.head
      raise AteItselfError
    end
  end</p>

<p>  def check_if_snake_met_wall
    snake.update_head(1,0) if snake.head[1] &gt; gameboard.width-1
    snake.update_head(1, gameboard.width-1) if snake.head[1]  gameboard.length-1
    snake.update_head(0, gameboard.length-1) if snake.head[0] &lt; 0
  end</p>

<p>  def check_if_snake_ate_food
    if snake.head[0] == food.x &amp;&amp; snake.head[1] == food.y
      snake.increase
      @food = Food.new(gameboard.width, gameboard.length)
    end
  end</p>

<p>  def start
    show_start_screen
    begin
      tick
    rescue AteItselfError
      show_message(&ldquo;Game over&rdquo;)
    end
  end</p>

<p>  def tick
    in_game = true
    while in_game
      draw_food_and_snake
      sleep(0.1)
      if key = GetKey.getkey
        in_game = execute_action(key)
      end
      snake.step
      check_snake_position
    end
    show_message(&ldquo;Game quit&rdquo;)
  end</p>

<p>  def execute_action key
    return false if compare_key(key, &lsquo;q&rsquo;)
    snake.turn(key)
  end</p>

<p>  def compare_key(key, char)
    key.chr == char.downcase || key.chr == char.upcase
  end
end
```</p>

<p>Let’s walk through the code.</p>

<ul>
<li><code>initialize</code> – creates the <code>Snake</code>, the <code>Board</code> and the <code>Food</code> objects;;</li>
<li><code>tick</code> – the main method that re-renders the Board and all objects in it, checks position, sets direction each 0.1 second. This value can be changed to increase or decrease speed of the game;</li>
<li><code>print_board</code> – prints the game Board on the screen for each tick of time;</li>
<li><code>draw_food_and_snake</code> – clears Board array and sets food and snake on it;</li>
<li><code>show_message</code> – draws message on our Board;</li>
<li><code>show_start_screen</code> – draws start screen;</li>
<li><code>check_if_snake_ate_itself</code> – ends game, if the Snake ate itself;</li>
<li><code>check_if_snake_met_wall</code> – updates head, if The Snake met the wall;</li>
<li><code>check_if_snake_ate_food</code> – increases Snake’s size, if the Snake eats food and re-creates food;</li>
<li><code>check_snake_position</code> – checks if snake met one of the positions above</li>
<li><code>start</code> – method, which runs our game. Launches tick and ends game, if any error appears in the game (example: <code>AteItselfError</code>);</li>
<li><code>execute_action</code> – executes an action on <code>keypress</code> by given keys;</li>
<li><code>compare_key</code> – compares the given key and receives one from <code>stdin</code>.</li>
</ul>


<h2>GETTING KEYS PRESSED</h2>

<p>You can see <code>GetKey</code> module, that I haven’t told you about. At the beginning of my development, I got into a situation that almost made me give up.
I tried <code>STDIN.read_nonblock</code>, <code>STDIN.getc</code>, <code>gets</code> and other solutions, but none of them gave me the expected result. Fortunately, I found <a href="http://stackoverflow.com/questions/946738/detect-key-press-non-blocking-w-o-getc-gets-in-ruby">this question</a>, which had a solution to my problem. Now we don’t wait until the key is pressed, but continue rendering our game with the movement of the Snake. <code>GetKey</code> module is listed under <code>lib/get_key.rb</code></p>

<h2>LET’S PLAY!</h2>

<p>Finally, you can write the last Ruby file that will start our Game – <code>start.rb</code>
<code>ruby
Dir[File.expand_path('lib/*.rb', File.dirname(__FILE__))].each do |file|
  require file
end
Dir[File.expand_path('lib/errors/*.rb', File.dirname(__FILE__))].each do |file|
  require file
end
require 'pry'
game = Game.new
game.start
</code>
You should be requiring all game files as you did in <code>spec_helper</code> and creating a new game object using <code>Game.new</code>. <code>game.start</code> that will start your game.
You should see something like this:</p>

<p><a href="https://asciinema.org/a/a71jakx5dwtp4jy2962ef3sw8"><img src="/images/ruby_snake/abf5d12ac93fe44c9e8b8051fddf8ac3dd60f4d1.png"></a></p>

<h2>CONCLUSION</h2>

<p>We have created a good base for a simple Snake Game that now can be extended with different features. I’ve played a bit with code and found that it is easy to create:</p>

<ul>
<li><p>a common Snake Game with walls:
<img src="/images/ruby_snake/Screenshot-from-2016-08-18-012212.png"></p></li>
<li><p>Snake Game for two players and for playing with computer opponent:
<img src="/images/ruby_snake/Screenshot-from-2016-08-18-013530.png"></p></li>
<li><p>Snake Game with different ‘enemies’ that can hurt you:
<img src="/images/ruby_snake/Screenshot-from-2016-08-18-012806.png"></p></li>
<li><p>and many more&hellip;</p></li>
</ul>


<p><a href="https://github.com/AKovtunov/ruby_snake">sources are here</a></p>

<h1 align="center">Enjoy the game!</h1>

]]></content>
  </entry>
  
</feed>
